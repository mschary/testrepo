
group Java;

typeInitMap ::= [
        "int":"0",
        "long":"0",
        "float":"0.0",
        "double":"0.0",
        "boolean":"false",
        "byte":"0",
        "short":"0",
        "char":"0",
        default:"null" // anything other than an atomic type
]

javaMethodMap ::= [
        "print":"System.out.println",
        "math.sqrt":"Math.sqrt",
        "os.exit":"com.konylabs.api.StandardLib.exit",
        "exit":"com.konylabs.api.StandardLib.exit",
        "os.platform":"com.konylabs.api.OSLib.platform",
        "os.useragent":"com.konylabs.api.OSLib.useragent",
        "phone.dial":"com.konylabs.api.PhoneLib.dial"
]


javaAPIMap ::= [
  "window.Alert":"com.konylabs.api.ui.KonyAlert.create",
  "window.Box" : "com.konylabs.api.ui.KonyContainer.create",
  "window.Button" : "com.konylabs.api.ui.KonyButton.create",
  "window.Calendar" : "com.konylabs.api.ui.calendar.KonyCalendar.create",
  "window.Camera" : "com.konylabs.api.ui.camera.KonyCamera.create",
  "window.CheckBoxGroup" : "com.konylabs.api.ui.KonyCheckBoxGroup.create",
  "window.Form" : "com.konylabs.api.ui.KonyForm.create",
  "window.Image" : "com.konylabs.api.ui.KonyImage.create",
  "window.Label" : "com.konylabs.api.ui.KonyLabel.create",
  "window.Line" : "com.konylabs.api.ui.KonyLine.create",
  "window.Map" : "com.konylabs.api.ui.KonyMap.create",
  "window.Popup" : "com.konylabs.api.ui.KonyPopup.create",
  "window.SegmentedUI" : "com.konylabs.api.ui.segui.KonySegmentedUI.create",
  "window.Skin" : "new com.konylabs.api.ui.KonySkin",
  "window.TextField" : "com.konylabs.api.ui.KonyTextField.create",

  "net.invokeservice" : "com.konylabs.api.NetworkLib.invokeservice",
  "net.invokeserviceasync" : "com.konylabs.api.NetworkLib.invokeserviceasync",

  "string.find" : "com.konylabs.api.StringLib.find",
  "string.len" : "com.konylabs.api.StringLib.len",
  "string.rep" : "com.konylabs.api.StringLib.rep",
  "string.sub" : "com.konylabs.api.StringLib.sub",
 
  "table.append" : "com.konylabs.api.TableLib.append",
  "table.get" : "com.konylabs.api.TableLib.get",
  "table.insert" : "com.konylabs.api.TableLib.insert"
  
]

global_tmpl(globalVars,globalFunctions) ::= <<

package com.konylabs.midlet;

class Global {
    <globalVars; separator="\n">
    <globalFunctions; separator="\n">
}
>>

program_tmpl(fileName, vars,functions ) ::= <<
package com.konylabs.midlet;

import com.konylabs.api.ui.*;
import com.konylabs.api.*;
import com.konylabs.vm.*;

class <fileName> {

    <vars; separator="\n\n">
    
    <functions; separator="\n\n">
}
>>
// START: file
file(defs) ::= <<
<defs; separator="\n">
>>
cast_tmpl(type,init) ::= "( <type> ) ( <init> )"

block_tmpl(stmt) ::= <<
{
  <stmt; separator="\n">
}
>>

comment_tmpl(comment, stmt) ::= <<
<stmt><if(comment)>/*<comment>*/<endif>
>>
blockComment_tmpl(comment, stmt) ::= <<
<if(comment)>/*<comment>*/<endif>
<stmt>
>>
comment2_tmpl(prevComment, stmt, postComment) ::= <<
<if(prevComment)><prevComment><endif>
<stmt><if(postComment)><postComment><endif>
>>

comment1_tmpl(comment, stmt) ::= <<
/*<comment>*/
<stmt>
>>

var_tmpl(prefix, type, name, init, ptype) ::= <<
<type> <name> = <if(init)><if(ptype)>(<ptype>) <endif><init><else><typeInitMap.(type)><endif>;
>>

varDecl_tmpl(isGlobal, prefix, type, name) ::= <<
<if(isGlobal)>public static <else>private static <endif><type> <if(prefix)><prefix>.<name><else><name><endif> = <typeInitMap.(type)>;
>>

varList_tmpl(vars) ::= <<
<vars; separator="\n">
>>

assign_tmpl(isLocal, prefix, a, b, ptype) ::= <<
<if(isLocal)><a> = <if(ptype)>(<ptype>) <endif><b><else><if(prefix)><prefix>.<endif><a> = <if(ptype)>(<ptype>) <endif><b><endif>;
>>


pow_tmpl(a,b) ::= "Math.pow(<a>,<b>)"

expression_tmpl(expr) ::= <<
<expr>
>>

bop_tmpl(op, a, b) ::= <<
<a> <op> <b>
>>

uop_tmpl(op, a) ::= <<
<op><a>
>>

hash_tmpl(a) ::= "<a>.length()"

expr_tmpl(expr) ::= "<expr>"

arrAccess_tmpl(name,index, ptype) ::= <<
<if(ptype)>(<ptype>) <endif> <name>.getTable(<index>)
>>


methodCallStmt_tmpl(call) ::= "<call>;"

methodCall1_tmpl(prefix, name, args) ::= <<
<if(javaMethodMap.(name))><javaMethodMap.(name)><else><if(prefix)><prefix>.<endif><name><endif>(<args; separator=",">)
>>

methodCall2_tmpl(name, args) ::= <<
<name>(new Object[] {<args; separator=",">})
>>

javaapi_tmpl(name) ::= <<
<if (javaAPIMap.(name))><javaAPIMap.(name)><else><name><endif>
>>

exprList_tmpl(expr) ::= <<
<expr; separator=",">
>>

while_tmpl(cond, stmt) ::= <<
while(<cond>)<stmt>
>>

doWhile_tmpl(cond, stmt) ::= <<
do<stmt>while(<cond>);
>>

return_tmpl(val) ::= "return <val>;"

if_stmt(cond, stmt, elb) ::= <<
if(<cond>)<stmt><if(elb)>else <elb><endif>
>>

if_stmt1(cond, stmt) ::= "if(<cond>)<stmt>"


ifelse_stmt(cond, stmt, elseb) ::= <<
if(<cond>)<stmt>else<elseb>
>>

dotMember_tmpl(mem, name, cast) ::= <<
<if(cast)>(<cast>) <endif> <mem>.getTable("<name>")
>>

method_dotMember_tmpl(mem, name) ::= <<
<mem>.<name>
>>

ident_tmpl(name) ::= "<name>"

dotList_tmpl(names) ::= <<
<names; separator=".">
>>

param_tmpl(type, name) ::= "<type> <name>"

paramList_tmpl(params) ::= <<
<params; separator=",">
>>

methodDecl_tmpl(isLocal, type,name,params,bl) ::= <<
<if(isLocal)>private <else>public static <endif><type> <name>(<params>)<bl>
>>

forInit_tmpl(type, var , init) ::= "<type> <var> = <init>"
forCondition_tmpl(name, cond) ::= <<
<name> \< <cond>
>> 

forUpdater_tmpl(name, cond) ::= "<name><cond>" 

for_tmpl(init, cond, updt, stmt) ::= <<
<if(updt)>
for(<init>;<cond>;<updt>)<stmt>
<else>
for(<init> ; <cond> ; <init.stmt.var>++)<stmt>
<endif>
>>

forIpair_tmpl(type, val, type1, val1, met, type2, var, bl) ::= <<
for(<type> <val>=0; <val> \< <var>.size(); <val>++){
  <type1> <val1> = (<type1>) <var>.get(i);
  <bl; separator="\n">
} 
>>


forPair_tmpl(type, val, met, type1, var, bl) ::= <<
java.util.Iterator _itr = <var>.iterator(); 
for(int _idx = 0; _itr.hasNext(); _idx++){
  <type> <val> = (<type>) _itr.getNext();
  <bl; separator="\n">
} 
>>




break_tmpl() ::= "break;"

tbl_param_tmpl(type, name) ::= "<type> <name>"

table_init_tmpl(prefix, fname, params) ::= <<
<if(prefix)><prefix>.<endif><fname>(<params; separator=",">)
>>

table_func_tmpl(fname, tname, body, params) ::= <<
public static LuaTable <fname>(<params; separator=",">)
{
     LuaTable <tname> = new LuaTable();
     <body>
     return <tname>;
}
>>

fieldList_tmpl(field) ::= <<
<field; separator=";\n">
>>

tblFieldList_tmpl(field) ::= <<
<field; separator="\n">
>>

field1_tmpl(tname, expr) ::= <<
<tname>.add(<expr>);
>>

field2_tmpl(tname, fname, expr) ::= <<
<tname>.setTable("<fname>", <expr>);
>>

field3_tmpl(tname, expr1, expr2) ::= <<
<tname>.setTable(<expr1>, <expr2>);
>>


field_tmpl(fields) ::= <<
<fields; separator=",">
>>

qualifiedDecl_tmpl(prefix, mem) ::= "<if(prefix)><prefix>.<endif><mem>"

