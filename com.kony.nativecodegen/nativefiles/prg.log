Loading API Symbols from ... D:\Prasad\nativecodegen\com.kony.nativecodegen\nativefiles\android/AndroidGUIGrammar.api
Defining new TYPE :: LuaTable
Defining new TYPE :: Object
Defining new TYPE :: todo
Defining new TYPE :: closure
Loading API Symbols from ... D:\Prasad\nativecodegen\com.kony.nativecodegen\nativefiles\android/AndroidNonGUIGrammar.api
Defining new TYPE :: array
Lexing... A1globalsequences.lua
Parsing... A1globalsequences.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT sdsd) FORMAL_PARAM_LIST BLOCK_SCOPE) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT sdsadasdas) FORMAL_PARAM_LIST BLOCK_SCOPE) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT dededed) FORMAL_PARAM_LIST (BLOCK_SCOPE (METHOD_CALL sdsadasdas ARGUMENT_LIST))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT newSequence) FORMAL_PARAM_LIST BLOCK_SCOPE))
FileName A1globalsequences
Lexing... application.lua
Parsing... application.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT displayMWError) FORMAL_PARAM_LIST (BLOCK_SCOPE (METHOD_CALL (. window Alert) (ARGUMENT_LIST (EXPR "Middleware Error ") (EXPR nil) (EXPR "error") (EXPR nil) (EXPR nil))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT displaySessionError) FORMAL_PARAM_LIST (BLOCK_SCOPE (METHOD_CALL (. window Alert) (ARGUMENT_LIST (EXPR "Session Expired .. Please re-login") (EXPR nil) (EXPR "error") (EXPR nil) (EXPR nil))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT displayError) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL code) (FORMAL_PARAM_STD_DECL msg)) (BLOCK_SCOPE (METHOD_CALL (. window Alert) (ARGUMENT_LIST (EXPR (.. (.. code "- ") msg)) (EXPR nil) (EXPR "error") (EXPR nil) (EXPR nil))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT appmiddlewareinvoker) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL inputparam) (FORMAL_PARAM_STD_DECL isBlocking) (FORMAL_PARAM_STD_DECL indicator) (FORMAL_PARAM_STD_DECL datasetID)) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL url)) (EXPR (.. "http://null/" "middleware/MWServlet"))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL sessionIdKey)) (EXPR "cacheid")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appID")))) (EXPR "A1")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "channel")))) (EXPR konychannel)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR kiden)))) (EXPR (METHOD_CALL (. os useragent) ARGUMENT_LIST))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appver")))) (EXPR "1.0.0")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "platform")))) (EXPR (. (METHOD_CALL (. os platform) ARGUMENT_LIST) name))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= indicator nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "indicator")))) (EXPR indicator)))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= datasetID nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "datasetID")))) (EXPR datasetID)))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR sessionIdKey)))) (EXPR sessionID)) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= globalhttpheaders nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR (METHOD_CALL (. table append) (ARGUMENT_LIST (EXPR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders"))) (EXPR globalhttpheaders)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR globalhttpheaders)))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL resulttable)) (EXPR (METHOD_CALL (. net invokeservice) (ARGUMENT_LIST (EXPR url) (EXPR inputparam) (EXPR isBlocking))))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= resulttable nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS resulttable (EXPR sessionIdKey)) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR sessionID)) (EXPR (ARRAY_ELEMENT_ACCESS resulttable (EXPR sessionIdKey)))))))) (return (EXPR resulttable)))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT appmiddlewaresecureinvoker) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL inputparam) (FORMAL_PARAM_STD_DECL isBlocking) (FORMAL_PARAM_STD_DECL indicator) (FORMAL_PARAM_STD_DECL datasetID)) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL url)) (EXPR (.. "https://null/" "middleware/MWServlet"))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL sessionIdKey)) (EXPR "cacheid")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appID")))) (EXPR "A1")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "channel")))) (EXPR konychannel)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR kiden)))) (EXPR (METHOD_CALL (. os useragent) ARGUMENT_LIST))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appver")))) (EXPR "1.0.0")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "platform")))) (EXPR (. (METHOD_CALL (. os platform) ARGUMENT_LIST) name))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= indicator nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "indicator")))) (EXPR indicator)))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= datasetID nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "datasetID")))) (EXPR datasetID)))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR sessionIdKey)))) (EXPR sessionID)) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= globalhttpheaders nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR (METHOD_CALL (. table append) (ARGUMENT_LIST (EXPR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders"))) (EXPR globalhttpheaders)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR globalhttpheaders)))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL resulttable)) (EXPR (METHOD_CALL (. net invokeservice) (ARGUMENT_LIST (EXPR url) (EXPR inputparam) (EXPR isBlocking))))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= resulttable nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS resulttable (EXPR sessionIdKey)) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR sessionID)) (EXPR (ARRAY_ELEMENT_ACCESS resulttable (EXPR sessionIdKey)))))))) (return (EXPR resulttable)))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT appmiddlewareinvokerasync) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL inputparam) (FORMAL_PARAM_STD_DECL callback)) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL url)) (EXPR (.. "http://null/" "middleware/MWServlet"))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL sessionIdKey)) (EXPR "cacheid")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appID")))) (EXPR "A1")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "channel")))) (EXPR konychannel)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR kiden)))) (EXPR (METHOD_CALL (. os useragent) ARGUMENT_LIST))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appver")))) (EXPR "1.0.0")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "platform")))) (EXPR (. (METHOD_CALL (. os platform) ARGUMENT_LIST) name))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= indicator nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "indicator")))) (EXPR indicator)))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= datasetID nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "datasetID")))) (EXPR datasetID)))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR sessionIdKey)))) (EXPR sessionID)) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= globalhttpheaders nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR (METHOD_CALL (. table append) (ARGUMENT_LIST (EXPR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders"))) (EXPR globalhttpheaders)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR globalhttpheaders)))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL connHandle)) (EXPR (METHOD_CALL (. net invokeserviceasync) (ARGUMENT_LIST (EXPR url) (EXPR inputparam) (EXPR callback))))) (return (EXPR connHandle)))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT appmiddlewaresecureinvokerasync) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL inputparam) (FORMAL_PARAM_STD_DECL callback)) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL url)) (EXPR (.. "https://null/" "middleware/MWServlet"))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL sessionIdKey)) (EXPR "cacheid")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appID")))) (EXPR "A1")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "channel")))) (EXPR konychannel)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR kiden)))) (EXPR (METHOD_CALL (. os useragent) ARGUMENT_LIST))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "appver")))) (EXPR "1.0.0")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "platform")))) (EXPR (. (METHOD_CALL (. os platform) ARGUMENT_LIST) name))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= indicator nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "indicator")))) (EXPR indicator)))) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= datasetID nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "datasetID")))) (EXPR datasetID)))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR sessionIdKey)))) (EXPR sessionID)) (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= globalhttpheaders nil)))))) (BLOCK_SCOPE (IF (EXPR (PARENTESIZED_EXPR (EXPR (PARENTESIZED_EXPR (EXPR (~= (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")) nil)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR (METHOD_CALL (. table append) (ARGUMENT_LIST (EXPR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders"))) (EXPR globalhttpheaders)))))) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (ARRAY_ELEMENT_ACCESS inputparam (EXPR "httpheaders")))) (EXPR globalhttpheaders)))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL connHandle)) (EXPR (METHOD_CALL (. net invokeserviceasync) (ARGUMENT_LIST (EXPR url) (EXPR inputparam) (EXPR callback))))) (return (EXPR connHandle)))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT makecall) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL eventobject)) (BLOCK_SCOPE (METHOD_CALL (. phone dial) (ARGUMENT_LIST (EXPR (. eventobject text)))))))
FileName Application
Declaring DEFS <local.url:void> in scope <global.appmiddlewareinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <local.sessionIdKey:void> in scope <global.appmiddlewareinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <local.resulttable:void> in scope <global.appmiddlewareinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <global.sessionID:void> in scope []
Declaring DEFS <local.url:void> in scope <global.appmiddlewaresecureinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <local.sessionIdKey:void> in scope <global.appmiddlewaresecureinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <local.resulttable:void> in scope <global.appmiddlewaresecureinvoker(inputparam, isBlocking, indicator, datasetID):void>
Declaring DEFS <local.url:void> in scope <global.appmiddlewareinvokerasync(inputparam, callback):void>
Declaring DEFS <local.sessionIdKey:void> in scope <global.appmiddlewareinvokerasync(inputparam, callback):void>
Declaring DEFS <local.connHandle:void> in scope <global.appmiddlewareinvokerasync(inputparam, callback):void>
Declaring DEFS <local.url:void> in scope <global.appmiddlewaresecureinvokerasync(inputparam, callback):void>
Declaring DEFS <local.sessionIdKey:void> in scope <global.appmiddlewaresecureinvokerasync(inputparam, callback):void>
Declaring DEFS <local.connHandle:void> in scope <global.appmiddlewaresecureinvokerasync(inputparam, callback):void>
Lexing... appskins.lua
Parsing... appskins.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT skinsinit) FORMAL_PARAM_LIST (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR blueplain)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "blueplain"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueplain bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueplain background_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueplain font_size))) (EXPR 133)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueplain font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueplain border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR blueround)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "blueround"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround background_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueround border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR blueroundchk)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "blueroundchk"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk background_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundchk border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR blueroundFocus)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "blueroundFocus"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus background_color))) (EXPR "b7d2ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus border_color))) (EXPR "b7d2ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundFocus border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR blueroundrad)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "blueroundrad"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad background_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. blueroundrad border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR formgrad)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "formgrad"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad background_gradient_bottom_color))) (EXPR "d2e3ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. formgrad border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundbtn)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundbtn"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn background_color))) (EXPR "bfd8ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundbtn border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundcal)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundcal"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal background_gradient_bottom_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcal border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundcam)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundcam"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam background_gradient_bottom_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcam border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundcom)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundcom"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom background_gradient_bottom_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundcom border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundFocus)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundFocus"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus background_gradient_top_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus background_gradient_bottom_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus border_color))) (EXPR "b7d2ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundFocus border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundfocusbtn)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundfocusbtn"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn background_gradient_top_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn background_gradient_bottom_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn border_color))) (EXPR "b7d2ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundfocusbtn border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundlist)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundlist"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist background_gradient_bottom_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundlist border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR gradroundph)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "gradroundph"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph background_gradient_top_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph background_gradient_bottom_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph border_color))) (EXPR "8db9fa00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. gradroundph border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR grey)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "grey"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. grey border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konydata)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konydata"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konydata bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konydata background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konydata font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konydata border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konyformnorm)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konyformnorm"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm bg_type))) (EXPR "two")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm background_style))) (EXPR "vg")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm background_gradient_top_color))) (EXPR "c0c0c000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm background_gradient_bottom_color))) (EXPR "f4f4f400")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyformnorm border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konygreytxtar)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konygreytxtar"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtar font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtar border_color))) (EXPR "69696700")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtar border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtar border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konygreytxtbx)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konygreytxtbx"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtbx font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtbx border_color))) (EXPR "69696700")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtbx border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konygreytxtbx border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konyline)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konyline"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyline bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyline background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyline border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konyrctxt)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konyrctxt"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyrctxt border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konysegfocus)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konysegfocus"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus background_color))) (EXPR "f99f1100")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegfocus border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konysegnorm)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konysegnorm"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konysegnorm border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konyslide)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konyslide"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyslide bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyslide background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyslide font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konyslide border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konytextar)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konytextar"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextar border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konytextarfocus)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konytextarfocus"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus background_color))) (EXPR "f99f1100")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytextarfocus border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konytxtfocus)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konytxtfocus"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus background_color))) (EXPR "f99f1100")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtfocus border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konytxtnorm)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "konytxtnorm"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm background_color))) (EXPR "80b6e500")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm font_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm border_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm border_width))) (EXPR 1)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. konytxtnorm border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR rowskin)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "rowskin"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. rowskin font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. rowskin border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR trans)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "trans"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. trans font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. trans border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR transfontblue)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "transfontblue"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontblue font_style))) (EXPR "underline")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontblue font_color))) (EXPR "0000a000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontblue border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR transfontFocused)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "transfontFocused"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontFocused font_style))) (EXPR "underline")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontFocused font_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. transfontFocused border_style))) (EXPR "plain")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiteround)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiteround"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteround border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiteroundFocused)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiteroundFocused"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused border_color))) (EXPR "0000ff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundFocused border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiteroundrichtxt)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiteroundrichtxt"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundrichtxt border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiteroundseg)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiteroundseg"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg border_width))) (EXPR 4)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundseg border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiteroundta)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiteroundta"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiteroundta border_style))) (EXPR "rc")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR whiterounftb)) (EXPR (METHOD_CALL (. window Skin) (ARGUMENT_LIST (EXPR "whiterounftb"))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb bg_type))) (EXPR "one")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb background_color))) (EXPR "ffffff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb font_color))) (EXPR "00000000")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb border_color))) (EXPR "96beff00")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb border_width))) (EXPR 2)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR (. whiterounftb border_style))) (EXPR "rc")))))
FileName Appskins
Declaring DEFS <global.blueplain:void> in scope <global.skinsinit():void>
Promoting  blueplain to a table 
Declaring DEFS <global.blueround:void> in scope <global.skinsinit():void>
Promoting  blueround to a table 
Declaring DEFS <global.blueroundchk:void> in scope <global.skinsinit():void>
Promoting  blueroundchk to a table 
Declaring DEFS <global.blueroundFocus:void> in scope <global.skinsinit():void>
Promoting  blueroundFocus to a table 
Declaring DEFS <global.blueroundrad:void> in scope <global.skinsinit():void>
Promoting  blueroundrad to a table 
Declaring DEFS <global.formgrad:void> in scope <global.skinsinit():void>
Promoting  formgrad to a table 
Declaring DEFS <global.gradroundbtn:void> in scope <global.skinsinit():void>
Promoting  gradroundbtn to a table 
Declaring DEFS <global.gradroundcal:void> in scope <global.skinsinit():void>
Promoting  gradroundcal to a table 
Declaring DEFS <global.gradroundcam:void> in scope <global.skinsinit():void>
Promoting  gradroundcam to a table 
Declaring DEFS <global.gradroundcom:void> in scope <global.skinsinit():void>
Promoting  gradroundcom to a table 
Declaring DEFS <global.gradroundFocus:void> in scope <global.skinsinit():void>
Promoting  gradroundFocus to a table 
Declaring DEFS <global.gradroundfocusbtn:void> in scope <global.skinsinit():void>
Promoting  gradroundfocusbtn to a table 
Declaring DEFS <global.gradroundlist:void> in scope <global.skinsinit():void>
Promoting  gradroundlist to a table 
Declaring DEFS <global.gradroundph:void> in scope <global.skinsinit():void>
Promoting  gradroundph to a table 
Declaring DEFS <global.grey:void> in scope <global.skinsinit():void>
Promoting  grey to a table 
Declaring DEFS <global.konydata:void> in scope <global.skinsinit():void>
Promoting  konydata to a table 
Declaring DEFS <global.konyformnorm:void> in scope <global.skinsinit():void>
Promoting  konyformnorm to a table 
Declaring DEFS <global.konygreytxtar:void> in scope <global.skinsinit():void>
Promoting  konygreytxtar to a table 
Declaring DEFS <global.konygreytxtbx:void> in scope <global.skinsinit():void>
Promoting  konygreytxtbx to a table 
Declaring DEFS <global.konyline:void> in scope <global.skinsinit():void>
Promoting  konyline to a table 
Declaring DEFS <global.konyrctxt:void> in scope <global.skinsinit():void>
Promoting  konyrctxt to a table 
Declaring DEFS <global.konysegfocus:void> in scope <global.skinsinit():void>
Promoting  konysegfocus to a table 
Declaring DEFS <global.konysegnorm:void> in scope <global.skinsinit():void>
Promoting  konysegnorm to a table 
Declaring DEFS <global.konyslide:void> in scope <global.skinsinit():void>
Promoting  konyslide to a table 
Declaring DEFS <global.konytextar:void> in scope <global.skinsinit():void>
Promoting  konytextar to a table 
Declaring DEFS <global.konytextarfocus:void> in scope <global.skinsinit():void>
Promoting  konytextarfocus to a table 
Declaring DEFS <global.konytxtfocus:void> in scope <global.skinsinit():void>
Promoting  konytxtfocus to a table 
Declaring DEFS <global.konytxtnorm:void> in scope <global.skinsinit():void>
Promoting  konytxtnorm to a table 
Declaring DEFS <global.rowskin:void> in scope <global.skinsinit():void>
Promoting  rowskin to a table 
Declaring DEFS <global.trans:void> in scope <global.skinsinit():void>
Promoting  trans to a table 
Declaring DEFS <global.transfontblue:void> in scope <global.skinsinit():void>
Promoting  transfontblue to a table 
Declaring DEFS <global.transfontFocused:void> in scope <global.skinsinit():void>
Promoting  transfontFocused to a table 
Declaring DEFS <global.whiteround:void> in scope <global.skinsinit():void>
Promoting  whiteround to a table 
Declaring DEFS <global.whiteroundFocused:void> in scope <global.skinsinit():void>
Promoting  whiteroundFocused to a table 
Declaring DEFS <global.whiteroundrichtxt:void> in scope <global.skinsinit():void>
Promoting  whiteroundrichtxt to a table 
Declaring DEFS <global.whiteroundseg:void> in scope <global.skinsinit():void>
Promoting  whiteroundseg to a table 
Declaring DEFS <global.whiteroundta:void> in scope <global.skinsinit():void>
Promoting  whiteroundta to a table 
Declaring DEFS <global.whiterounftb:void> in scope <global.skinsinit():void>
Promoting  whiterounftb to a table 
Lexing... Form1.lua
Parsing... Form1.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT addwidgetsForm1) FORMAL_PARAM_LIST (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL image1209475810266)) (EXPR (METHOD_CALL (. window Image) (ARGUMENT_LIST (EXPR "image1209475810266") (EXPR nil) (EXPR true) (EXPR 7) (EXPR false) (EXPR false) (EXPR 1) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR glossyEffect (EXPR "none")) (VAR_DECLARATOR gesturecode (EXPR "right gesture")) (VAR_DECLARATOR downloadprogressindicator (EXPR true)) (VAR_DECLARATOR imagewhenfailed (EXPR nil)) (VAR_DECLARATOR scalemode (EXPR 1)) (VAR_DECLARATOR margin (EXPR "1,1,1,1"))))))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL map1209475810266)) (EXPR (METHOD_CALL (. window Map) (ARGUMENT_LIST (EXPR "map1209475810266") (EXPR nil) (EXPR "google") (EXPR "1") (EXPR nil) (EXPR 14) (EXPR true) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR initialZoomlevel (EXPR "14")) (VAR_DECLARATOR screenLevelWidget (EXPR true)) (VAR_DECLARATOR margin (EXPR "1,1,1,1"))))))))) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL map1209475810268)) (EXPR (METHOD_CALL (. window Map) (ARGUMENT_LIST (EXPR "map1209475810268") (EXPR nil) (EXPR "google") (EXPR "1") (EXPR nil) (EXPR 14) (EXPR true) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR initialZoomlevel (EXPR "14")) (VAR_DECLARATOR screenLevelWidget (EXPR true)) (VAR_DECLARATOR margin (EXPR "1,1,1,1"))))))))) (METHOD_CALL (. form add) (ARGUMENT_LIST (EXPR Form1) (EXPR image1209475810266) (EXPR map1209475810266) (EXPR map1209475810268))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT Form1globals) FORMAL_PARAM_LIST (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL mid)) (EXPR ARRAY_INITIALIZER)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR Form1)) (EXPR (METHOD_CALL (. window Form) (ARGUMENT_LIST (EXPR "Form1") (EXPR formgrad) (EXPR nil) (EXPR "vertical") (EXPR mid) (EXPR nil) (EXPR nil) (EXPR addwidgetsForm1) (EXPR nil) (EXPR nil) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR needAppLevelMenu (EXPR "true")) (VAR_DECLARATOR menuRenderer (EXPR "true")) (VAR_DECLARATOR needAppLevelMenu (EXPR "true")) (VAR_DECLARATOR transitionDirection (EXPR "none")) (VAR_DECLARATOR transitionEffect (EXPR "none")) (VAR_DECLARATOR orientationmode (EXPR 0)) (VAR_DECLARATOR NeedsIndicatorDuringPostShow (EXPR true)) (VAR_DECLARATOR FormTransparencyDuringPostShow (EXPR 100)) (VAR_DECLARATOR enabledforidletimeout (EXPR false)) (VAR_DECLARATOR titleBar (EXPR "true")) (VAR_DECLARATOR titleBarBackgroundImage (EXPR nil)) (VAR_DECLARATOR renderTitleText (EXPR "true"))))))))))))
FileName Form1
Declaring DEFS <local.image1209475810266:void> in scope <global.addwidgetsForm1():void>
Declaring DEFS <local.map1209475810266:void> in scope <global.addwidgetsForm1():void>
Declaring DEFS <local.map1209475810268:void> in scope <global.addwidgetsForm1():void>
Declaring DEFS <local.mid:void> in scope <global.Form1globals():void>
Declaring DEFS <global.Form1:void> in scope <global.Form1globals():void>
Lexing... globalsinit.lua
Parsing... globalsinit.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT globalsinit) FORMAL_PARAM_LIST (BLOCK_SCOPE (METHOD_CALL skinsinit ARGUMENT_LIST) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR config)) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR appid (EXPR "A1")) (VAR_DECLARATOR appname (EXPR "A1")) (VAR_DECLARATOR appversion (EXPR "1.0.0")) (VAR_DECLARATOR platformversion (EXPR nil)) (VAR_DECLARATOR serverip (EXPR nil)) (VAR_DECLARATOR serverport (EXPR nil)) (VAR_DECLARATOR middlewarecontext (EXPR "middleware")))))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT appinit) FORMAL_PARAM_LIST (BLOCK_SCOPE (METHOD_CALL globalsinit ARGUMENT_LIST) (METHOD_CALL Form1globals ARGUMENT_LIST) (METHOD_CALL map1globals ARGUMENT_LIST))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT initializeApp) (FORMAL_PARAM_LIST FORMAL_PARAM_VARARG_DECL) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR sessionID)) (EXPR "")) (METHOD_CALL appinit ARGUMENT_LIST) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR startupform)) (EXPR Form1)) (METHOD_CALL (. form show) (ARGUMENT_LIST (EXPR startupform))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT initThinClient) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL initialContext)) (BLOCK_SCOPE (METHOD_CALL initializeApp (ARGUMENT_LIST (EXPR initialContext))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT sessionDeepLink) (FORMAL_PARAM_LIST (FORMAL_PARAM_STD_DECL deeplinkContext)) (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL startupform)) (EXPR Form1)) (METHOD_CALL (. form show) (ARGUMENT_LIST (EXPR startupform))))))
FileName Globalsinit
Declaring DEFS <global.config:void> in scope <global.globalsinit():void>
Declaring DEFS <global.startupform:void> in scope <global.initializeApp():void>
Lexing... map1.lua
Parsing... map1.lua
Parse tree: (LUA_SOURCE (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT addwidgetsmap1) FORMAL_PARAM_LIST (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL map1209475810264)) (EXPR (METHOD_CALL (. window Map) (ARGUMENT_LIST (EXPR "map1209475810264") (EXPR nil) (EXPR "google") (EXPR "1") (EXPR nil) (EXPR 14) (EXPR true) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR initialZoomlevel (EXPR "14")) (VAR_DECLARATOR screenLevelWidget (EXPR true)) (VAR_DECLARATOR margin (EXPR "1,1,1,1"))))))))) (METHOD_CALL (. form add) (ARGUMENT_LIST (EXPR map1) (EXPR map1209475810264))))) (FUNCTION_METHOD_DECL (QUALIFIED_TYPE_IDENT map1globals) FORMAL_PARAM_LIST (BLOCK_SCOPE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR LOCAL mid)) (EXPR ARRAY_INITIALIZER)) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR map1)) (EXPR (METHOD_CALL (. window Form) (ARGUMENT_LIST (EXPR "map1") (EXPR formgrad) (EXPR nil) (EXPR "vertical") (EXPR mid) (EXPR nil) (EXPR nil) (EXPR addwidgetsmap1) (EXPR nil) (EXPR nil) (EXPR (ARRAY_INITIALIZER (FIELD_LIST (VAR_DECLARATOR needAppLevelMenu (EXPR "true")) (VAR_DECLARATOR menuRenderer (EXPR "true")) (VAR_DECLARATOR needAppLevelMenu (EXPR "true")) (VAR_DECLARATOR transitionDirection (EXPR "none")) (VAR_DECLARATOR transitionEffect (EXPR "none")) (VAR_DECLARATOR orientationmode (EXPR 0)) (VAR_DECLARATOR NeedsIndicatorDuringPostShow (EXPR true)) (VAR_DECLARATOR FormTransparencyDuringPostShow (EXPR 100)) (VAR_DECLARATOR enabledforidletimeout (EXPR false)) (VAR_DECLARATOR titleBar (EXPR "true")) (VAR_DECLARATOR titleBarBackgroundImage (EXPR nil)) (VAR_DECLARATOR renderTitleText (EXPR "true"))))))))))))
FileName Map1
Declaring DEFS <local.map1209475810264:void> in scope <global.addwidgetsmap1():void>
Declaring DEFS <local.mid:void> in scope <global.map1globals():void>
Declaring DEFS <global.map1:void> in scope <global.map1globals():void>
Lexing... rcchannel.lua
Parsing... rcchannel.lua
Parse tree: (LUA_SOURCE (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR kiden)) (EXPR "rcid")) (VAR_DECLARATION (VAR_DECLARATOR_LIST (VAR_DECLARATOR konychannel)) (EXPR "rc")))
FileName Rcchannel
Declaring DEFS <global.kiden:void> in scope [boolean, char, int, float, void, null, skin, skinHandle, voidHandle, widgetHandle, formHandle, boxHandle, tabHandle, popupHandle, buttonHandle, calendarHandle, checkboxgroupHandle, comboboxHandle, datagridHandle, imageHandle, labelHandle, lineHandle, linkHandle, listboxHandle, radiobuttongroupHandle, richtextHandle, textareaHandle, textfieldHandle, webHandle, cameraHandle, imagestripHandle, galleryHandle, mapHandle, segmenteduiHandle, showloadingscreenHandle, sliderHandle, advertisementHandle, rawbytesHandle, formPSPHandle, boxPSPHandle, tabPSPHandle, popupPSPHandle, buttonPSPHandle, calendarPSPHandle, checkboxgroupPSPHandle, comboboxPSPHandle, datagridPSPHandle, imagePSPHandle, labelPSPHandle, linePSPHandle, linkPSPHandle, listboxPSPHandle, radiobuttongroupPSPHandle, richtextPSPHandle, textareaPSPHandle, textfieldPSPHandle, webPSPHandle, cameraPSPHandle, imagestripPSPHandle, galleryPSPHandle, mapPSPHandle, segmenteduiPSPHandle, showloadingscreenPSPHandle, sliderPSPHandle, advertisementPSPHandle, widget, window, form, box, tabwidget, popupContextTable, popup, button, calendar, datagrid, image, label, line, link, listbox, combobox, checkboxgroup, radiobuttongroup, richtext, textarea, web, camera, imagestrip, gallery, map, segui, Showloadingscreen, slider, advertisement, String, LuaTable, Object, todo, closure, addeventhandle, findeventhandle, findRet, luaReturn, phone, contact, dssavehashtable, ds, networksynchandle, networkasynchandle, net, streamhandle, streaming, timerhandle, timer, i18n, string, table, math, os, global, _aasim_ipairs, ipairs, _aasim_pairs, pairs, _aasim_unpack, unpack, _aasim_print, print, _aasim_ctbase64, converttobase64, _aasim_rfbase64, readfrombase64, _aasim_rfitimeout, registerforidletimeout, _aasim_ufitimeout, unregisterforidletimeout, _aasim_samenu, setappmenu, _aasim_safindex, setappmenufocusindex, _aasim_hamitems, hideappmenuitems, _aasim_samitems, showappmenuitems, array, sdsd, sdsadasdas, dededed, newSequence, displayMWError, displaySessionError, displayError, appmiddlewareinvoker, sessionID, appmiddlewaresecureinvoker, appmiddlewareinvokerasync, appmiddlewaresecureinvokerasync, makecall, skinsinit, blueplain, blueround, blueroundchk, blueroundFocus, blueroundrad, formgrad, gradroundbtn, gradroundcal, gradroundcam, gradroundcom, gradroundFocus, gradroundfocusbtn, gradroundlist, gradroundph, grey, konydata, konyformnorm, konygreytxtar, konygreytxtbx, konyline, konyrctxt, konysegfocus, konysegnorm, konyslide, konytextar, konytextarfocus, konytxtfocus, konytxtnorm, rowskin, trans, transfontblue, transfontFocused, whiteround, whiteroundFocused, whiteroundrichtxt, whiteroundseg, whiteroundta, whiterounftb, addwidgetsForm1, Form1globals, Form1, globalsinit, config, appinit, initializeApp, startupform, initThinClient, sessionDeepLink, addwidgetsmap1, map1globals, map1, kiden]
Declaring DEFS <global.konychannel:void> in scope [boolean, char, int, float, void, null, skin, skinHandle, voidHandle, widgetHandle, formHandle, boxHandle, tabHandle, popupHandle, buttonHandle, calendarHandle, checkboxgroupHandle, comboboxHandle, datagridHandle, imageHandle, labelHandle, lineHandle, linkHandle, listboxHandle, radiobuttongroupHandle, richtextHandle, textareaHandle, textfieldHandle, webHandle, cameraHandle, imagestripHandle, galleryHandle, mapHandle, segmenteduiHandle, showloadingscreenHandle, sliderHandle, advertisementHandle, rawbytesHandle, formPSPHandle, boxPSPHandle, tabPSPHandle, popupPSPHandle, buttonPSPHandle, calendarPSPHandle, checkboxgroupPSPHandle, comboboxPSPHandle, datagridPSPHandle, imagePSPHandle, labelPSPHandle, linePSPHandle, linkPSPHandle, listboxPSPHandle, radiobuttongroupPSPHandle, richtextPSPHandle, textareaPSPHandle, textfieldPSPHandle, webPSPHandle, cameraPSPHandle, imagestripPSPHandle, galleryPSPHandle, mapPSPHandle, segmenteduiPSPHandle, showloadingscreenPSPHandle, sliderPSPHandle, advertisementPSPHandle, widget, window, form, box, tabwidget, popupContextTable, popup, button, calendar, datagrid, image, label, line, link, listbox, combobox, checkboxgroup, radiobuttongroup, richtext, textarea, web, camera, imagestrip, gallery, map, segui, Showloadingscreen, slider, advertisement, String, LuaTable, Object, todo, closure, addeventhandle, findeventhandle, findRet, luaReturn, phone, contact, dssavehashtable, ds, networksynchandle, networkasynchandle, net, streamhandle, streaming, timerhandle, timer, i18n, string, table, math, os, global, _aasim_ipairs, ipairs, _aasim_pairs, pairs, _aasim_unpack, unpack, _aasim_print, print, _aasim_ctbase64, converttobase64, _aasim_rfbase64, readfrombase64, _aasim_rfitimeout, registerforidletimeout, _aasim_ufitimeout, unregisterforidletimeout, _aasim_samenu, setappmenu, _aasim_safindex, setappmenufocusindex, _aasim_hamitems, hideappmenuitems, _aasim_samitems, showappmenuitems, array, sdsd, sdsadasdas, dededed, newSequence, displayMWError, displaySessionError, displayError, appmiddlewareinvoker, sessionID, appmiddlewaresecureinvoker, appmiddlewareinvokerasync, appmiddlewaresecureinvokerasync, makecall, skinsinit, blueplain, blueround, blueroundchk, blueroundFocus, blueroundrad, formgrad, gradroundbtn, gradroundcal, gradroundcam, gradroundcom, gradroundFocus, gradroundfocusbtn, gradroundlist, gradroundph, grey, konydata, konyformnorm, konygreytxtar, konygreytxtbx, konyline, konyrctxt, konysegfocus, konysegnorm, konyslide, konytextar, konytextarfocus, konytxtfocus, konytxtnorm, rowskin, trans, transfontblue, transfontFocused, whiteround, whiteroundFocused, whiteroundrichtxt, whiteroundseg, whiteroundta, whiterounftb, addwidgetsForm1, Form1globals, Form1, globalsinit, config, appinit, initializeApp, startupform, initThinClient, sessionDeepLink, addwidgetsmap1, map1globals, map1, kiden, konychannel]
Lexing... startup.lua
Parsing... startup.lua
Parse tree: (LUA_SOURCE (METHOD_CALL initializeApp ARGUMENT_LIST))
FileName Startup
Lexing... _test.lua
Linking... A1globalsequences
function line 1: def method sdsd in scope []
Exit Function Local <global.sdsd():void> Enclosed in []
function line 3: def method sdsadasdas in scope []
Exit Function Local <global.sdsadasdas():void> Enclosed in []
function line 5: def method dededed in scope []
Exit Function Local <global.dededed():void> Enclosed in []
function line 8: def method newSequence in scope []
Exit Function Local <global.newSequence():void> Enclosed in []
Linking... Application
function line 1: def method displayMWError in scope []
Exit Function Local <global.displayMWError():void> Enclosed in []
function line 4: def method displaySessionError in scope []
Exit Function Local <global.displaySessionError():void> Enclosed in []
function line 7: def method displayError in scope []
Exit Function Local <global.displayError(code, msg):void> Enclosed in []
function line 10: def method appmiddlewareinvoker in scope []
Overrode type of <local.url:String>
Overrode type of <local.sessionIdKey:String>
TABLE IDENT type<table.channel:void>
ARRAY_ELEMENT_ACCESS: index EXPR<void> is not string type Struct inputparam<table>
TABLE IDENT type<table.appver:String>
TABLE IDENT type<table.indicator:void>
TABLE IDENT type<table.datasetID:void>
TABLE IDENT type<table.sessionIdKey:void>
Possible use of a non initialized variable <globalhttpheaders> as an argument at Application.lua:27
Overrode type of <table.httpheaders:LuaTable>
Non Compatible assignment of VAR <table.httpheaders:LuaTable> at line 29 with globalhttpheaders
Overrode type of <local.resulttable:Object>
Symbol <resulttable<Object>> is not structure type
Promoting resulttable to <local.resulttable:table>
Return for function <global.appmiddlewareinvoker(inputparam, isBlocking, indicator, datasetID):void>
Return Captured table
Exit Function Local [] Enclosed in []
function line 40: def method appmiddlewaresecureinvoker in scope []
Overrode type of <local.url:String>
Overrode type of <local.sessionIdKey:String>
TABLE IDENT type<table.channel:void>
ARRAY_ELEMENT_ACCESS: index EXPR<void> is not string type Struct inputparam<table>
TABLE IDENT type<table.appver:String>
TABLE IDENT type<table.indicator:void>
TABLE IDENT type<table.datasetID:void>
TABLE IDENT type<table.sessionIdKey:void>
Possible use of a non initialized variable <globalhttpheaders> as an argument at Application.lua:57
Overrode type of <table.httpheaders:LuaTable>
Non Compatible assignment of VAR <table.httpheaders:LuaTable> at line 59 with globalhttpheaders
Overrode type of <local.resulttable:Object>
Symbol <resulttable<Object>> is not structure type
Promoting resulttable to <local.resulttable:table>
Return for function <global.appmiddlewaresecureinvoker(inputparam, isBlocking, indicator, datasetID):void>
Return Captured table
Exit Function Local [] Enclosed in []
function line 70: def method appmiddlewareinvokerasync in scope []
Overrode type of <local.url:String>
Overrode type of <local.sessionIdKey:String>
TABLE IDENT type<table.channel:void>
ARRAY_ELEMENT_ACCESS: index EXPR<void> is not string type Struct inputparam<table>
TABLE IDENT type<table.appver:String>
TABLE IDENT typetable.indicator
TABLE IDENT typetable.datasetID
TABLE IDENT type<table.sessionIdKey:void>
Possible use of a non initialized variable <globalhttpheaders> as an argument at Application.lua:87
Overrode type of <table.httpheaders:LuaTable>
Non Compatible assignment of VAR <table.httpheaders:LuaTable> at line 89 with globalhttpheaders
Overrode type of <local.connHandle:Object>
Return for function <global.appmiddlewareinvokerasync(inputparam, callback):void>
Return Captured Object
Exit Function Local [url, sessionIdKey, connHandle] Enclosed in <global.appmiddlewareinvokerasync(inputparam, callback):Object>
function line 95: def method appmiddlewaresecureinvokerasync in scope []
Overrode type of <local.url:String>
Overrode type of <local.sessionIdKey:String>
TABLE IDENT type<table.channel:void>
ARRAY_ELEMENT_ACCESS: index EXPR<void> is not string type Struct inputparam<table>
TABLE IDENT type<table.appver:String>
TABLE IDENT typetable.indicator
TABLE IDENT typetable.datasetID
TABLE IDENT type<table.sessionIdKey:void>
Possible use of a non initialized variable <globalhttpheaders> as an argument at Application.lua:112
Overrode type of <table.httpheaders:LuaTable>
Non Compatible assignment of VAR <table.httpheaders:LuaTable> at line 114 with globalhttpheaders
Overrode type of <local.connHandle:Object>
Return for function <global.appmiddlewaresecureinvokerasync(inputparam, callback):void>
Return Captured Object
Exit Function Local [url, sessionIdKey, connHandle] Enclosed in <global.appmiddlewaresecureinvokerasync(inputparam, callback):Object>
function line 120: def method makecall in scope []
Possible use of a non initialized variable <eventobject.text> as an argument at Application.lua:121
Exit Function Local <global.makecall(eventobject):void> Enclosed in []
Linking... Appskins
function line 1: def method skinsinit in scope []
Non Compatible assignment of VAR <global.blueplain:table> at line 2 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_size:int>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.blueround:table> at line 8 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.blueroundchk:table> at line 15 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.blueroundFocus:table> at line 22 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.blueroundrad:table> at line 29 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.formgrad:table> at line 36 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_style:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundbtn:table> at line 43 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundcal:table> at line 50 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundcam:table> at line 59 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundcom:table> at line 68 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundFocus:table> at line 77 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundfocusbtn:table> at line 86 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundlist:table> at line 95 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.gradroundph:table> at line 104 with METHOD_CALL<LuaTable>
Overrode type of <table.background_style:String>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.grey:table> at line 113 with METHOD_CALL<LuaTable>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konydata:table> at line 115 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konyformnorm:table> at line 120 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_style:String>
Overrode type of <table.background_gradient_top_color:String>
Overrode type of <table.background_gradient_bottom_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konygreytxtar:table> at line 127 with METHOD_CALL<LuaTable>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konygreytxtbx:table> at line 132 with METHOD_CALL<LuaTable>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konyline:table> at line 137 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konyrctxt:table> at line 141 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konysegfocus:table> at line 148 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konysegnorm:table> at line 155 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konyslide:table> at line 162 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konytextar:table> at line 167 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konytextarfocus:table> at line 174 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konytxtfocus:table> at line 181 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.konytxtnorm:table> at line 188 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.rowskin:table> at line 195 with METHOD_CALL<LuaTable>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.trans:table> at line 198 with METHOD_CALL<LuaTable>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.transfontblue:table> at line 201 with METHOD_CALL<LuaTable>
Overrode type of <table.font_style:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.transfontFocused:table> at line 205 with METHOD_CALL<LuaTable>
Overrode type of <table.font_style:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiteround:table> at line 209 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiteroundFocused:table> at line 216 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiteroundrichtxt:table> at line 223 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiteroundseg:table> at line 230 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiteroundta:table> at line 237 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Non Compatible assignment of VAR <global.whiterounftb:table> at line 244 with METHOD_CALL<LuaTable>
Overrode type of <table.bg_type:String>
Overrode type of <table.background_color:String>
Overrode type of <table.font_color:String>
Overrode type of <table.border_color:String>
Overrode type of <table.border_width:int>
Overrode type of <table.border_style:String>
Exit Function Local table Enclosed in []
Linking... Form1
function line 1: def method addwidgetsForm1 in scope []
Overrode type of <local.image1209475810266:LuaTable>
Overrode type of <local.map1209475810266:LuaTable>
Overrode type of <local.map1209475810268:LuaTable>
Exit Function Local [image1209475810266, map1209475810266, map1209475810268] Enclosed in <global.addwidgetsForm1():void>
function line 22: def method Form1globals in scope []
Overrode type of <local.mid:table>
Overrode type of <global.Form1:LuaTable>
Exit Function Local [mid] Enclosed in <global.Form1globals():void>
Linking... Globalsinit
function line 1: def method globalsinit in scope []
Overrode type of <global.config:table>
Exit Function Local [] Enclosed in <global.globalsinit():void>
function line 13: def method appinit in scope []
Exit Function Local <global.appinit():void> Enclosed in []
function line 18: def method initializeApp in scope []
Overrode type of <global.sessionID:String>
Overrode type of <global.startupform:LuaTable>
Exit Function Local [] Enclosed in <global.initializeApp():void>
function line 24: def method initThinClient in scope []
Exit Function Local <global.initThinClient(initialContext):void> Enclosed in []
function line 27: def method sessionDeepLink in scope []
Exit Function Local [] Enclosed in <global.sessionDeepLink(deeplinkContext):void>
Linking... Map1
function line 1: def method addwidgetsmap1 in scope []
Overrode type of <local.map1209475810264:LuaTable>
Exit Function Local [map1209475810264] Enclosed in <global.addwidgetsmap1():void>
function line 9: def method map1globals in scope []
Overrode type of <local.mid:table>
Overrode type of <global.map1:LuaTable>
Exit Function Local [mid] Enclosed in <global.map1globals():void>
Linking... Rcchannel
Overrode type of <global.kiden:String>
Overrode type of <global.konychannel:String>
Linking... Startup
Casting... A1globalsequences
function line 1: def method sdsd in scope []
Exit Function Local <global.sdsd():void> Enclosed in []
function line 3: def method sdsadasdas in scope []
Exit Function Local <global.sdsadasdas():void> Enclosed in []
function line 5: def method dededed in scope []
Exit Function Local <global.dededed():void> Enclosed in []
function line 8: def method newSequence in scope []
Exit Function Local <global.newSequence():void> Enclosed in []
Casting... Application
function line 1: def method displayMWError in scope []
Exit Function Local <global.displayMWError():void> Enclosed in []
function line 4: def method displaySessionError in scope []
Exit Function Local <global.displaySessionError():void> Enclosed in []
function line 7: def method displayError in scope []
Exit Function Local <global.displayError(code, msg):void> Enclosed in []
function line 10: def method appmiddlewareinvoker in scope []
TABLE IDENT type<table.appID:String>
Overrode type of <table.channel:String>
TABLE IDENT typetable.kiden
Overrode type of <table.sessionIdKey:String>
Non Compatible assignment of VAR <local.resulttable:table> at line 32 with METHOD_CALL<Object>
Non Compatible assignment of VAR <global.sessionID:String> at line 35 with ARRAY_ELEMENT_ACCESS<void>
Return for function <global.appmiddlewareinvoker(inputparam, isBlocking, indicator, datasetID):table>
Return Captured table
Exit Function Local [] Enclosed in []
function line 40: def method appmiddlewaresecureinvoker in scope []
TABLE IDENT type<table.appID:String>
Overrode type of <table.channel:String>
TABLE IDENT typetable.kiden
Overrode type of <table.sessionIdKey:String>
Non Compatible assignment of VAR <local.resulttable:table> at line 62 with METHOD_CALL<Object>
Non Compatible assignment of VAR <global.sessionID:String> at line 65 with ARRAY_ELEMENT_ACCESS<void>
Return for function <global.appmiddlewaresecureinvoker(inputparam, isBlocking, indicator, datasetID):table>
Return Captured table
Exit Function Local [] Enclosed in []
function line 70: def method appmiddlewareinvokerasync in scope []
TABLE IDENT type<table.appID:String>
Overrode type of <table.channel:String>
TABLE IDENT typetable.kiden
Overrode type of <table.sessionIdKey:String>
Return for function <global.appmiddlewareinvokerasync(inputparam, callback):Object>
Return Captured Object
Exit Function Local [url, sessionIdKey, connHandle] Enclosed in <global.appmiddlewareinvokerasync(inputparam, callback):Object>
function line 95: def method appmiddlewaresecureinvokerasync in scope []
TABLE IDENT type<table.appID:String>
Overrode type of <table.channel:String>
TABLE IDENT typetable.kiden
Overrode type of <table.sessionIdKey:String>
Return for function <global.appmiddlewaresecureinvokerasync(inputparam, callback):Object>
Return Captured Object
Exit Function Local [url, sessionIdKey, connHandle] Enclosed in <global.appmiddlewaresecureinvokerasync(inputparam, callback):Object>
function line 120: def method makecall in scope []
Possible use of a non initialized variable <> as an argument at Application.lua:121
Exit Function Local <global.makecall(eventobject):void> Enclosed in []
Casting... Appskins
function line 1: def method skinsinit in scope []
Non Compatible assignment of VAR <global.blueplain:table> at line 2 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.blueround:table> at line 8 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.blueroundchk:table> at line 15 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.blueroundFocus:table> at line 22 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.blueroundrad:table> at line 29 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.formgrad:table> at line 36 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundbtn:table> at line 43 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundcal:table> at line 50 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundcam:table> at line 59 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundcom:table> at line 68 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundFocus:table> at line 77 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundfocusbtn:table> at line 86 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundlist:table> at line 95 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.gradroundph:table> at line 104 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.grey:table> at line 113 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konydata:table> at line 115 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konyformnorm:table> at line 120 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konygreytxtar:table> at line 127 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konygreytxtbx:table> at line 132 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konyline:table> at line 137 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konyrctxt:table> at line 141 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konysegfocus:table> at line 148 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konysegnorm:table> at line 155 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konyslide:table> at line 162 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konytextar:table> at line 167 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konytextarfocus:table> at line 174 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konytxtfocus:table> at line 181 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.konytxtnorm:table> at line 188 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.rowskin:table> at line 195 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.trans:table> at line 198 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.transfontblue:table> at line 201 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.transfontFocused:table> at line 205 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiteround:table> at line 209 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiteroundFocused:table> at line 216 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiteroundrichtxt:table> at line 223 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiteroundseg:table> at line 230 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiteroundta:table> at line 237 with METHOD_CALL<LuaTable:table>
Non Compatible assignment of VAR <global.whiterounftb:table> at line 244 with METHOD_CALL<LuaTable:table>
Exit Function Local table Enclosed in []
Casting... Form1
function line 1: def method addwidgetsForm1 in scope []
Exit Function Local [image1209475810266, map1209475810266, map1209475810268] Enclosed in <global.addwidgetsForm1():void>
function line 22: def method Form1globals in scope []
Non Compatible assignment of VAR <local.mid:table> at line 23 with ARRAY_INITIALIZER<table>
Exit Function Local [mid] Enclosed in <global.Form1globals():void>
Casting... Globalsinit
function line 1: def method globalsinit in scope []
Non Compatible assignment of VAR <global.config:table> at line 3 with ARRAY_INITIALIZER<table>
Exit Function Local [] Enclosed in <global.globalsinit():void>
function line 13: def method appinit in scope []
Exit Function Local <global.appinit():void> Enclosed in []
function line 18: def method initializeApp in scope []
Exit Function Local [] Enclosed in <global.initializeApp():void>
function line 24: def method initThinClient in scope []
Exit Function Local <global.initThinClient(initialContext):void> Enclosed in []
function line 27: def method sessionDeepLink in scope []
Exit Function Local [] Enclosed in <global.sessionDeepLink(deeplinkContext):void>
Casting... Map1
function line 1: def method addwidgetsmap1 in scope []
Exit Function Local [map1209475810264] Enclosed in <global.addwidgetsmap1():void>
function line 9: def method map1globals in scope []
Non Compatible assignment of VAR <local.mid:table> at line 10 with ARRAY_INITIALIZER<table>
Exit Function Local [mid] Enclosed in <global.map1globals():void>
Casting... Rcchannel
Casting... Startup
Generating... A1globalsequences
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class A1globalsequences {
    // function sdsd ()
    public static void sdsd(){ }
    // function sdsadasdas ()
    public static void sdsadasdas(){ }
    // function dededed ()
    public static void dededed(){
      // sdsadasdas();
      A1globalsequences.sdsadasdas();
    }
    // function newSequence ()
    public static void newSequence(){ }
}
Generating... Application
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Application {
    public static String sessionID = null;
    // function displayMWError ()
    public static void displayMWError(){
      // window.Alert( "Middleware Error ", nil, "error", nil, nil );
      Window.createAlert(new Object[] {"Middleware Error ",LuaNil.nil,"error",LuaNil.nil,LuaNil.nil});
    }
    // function displaySessionError ()
    public static void displaySessionError(){
      // window.Alert( "Session Expired .. Please re-login", nil, "error", nil, nil );
      Window.createAlert(new Object[] {"Session Expired .. Please re-login",LuaNil.nil,"error",LuaNil.nil,LuaNil.nil});
    }
    // function displayError ( code, msg )
    public static void displayError(String code,String msg){
      // window.Alert( code.."- "..msg, nil, "error", nil, nil );
      Window.createAlert(new Object[] {code + "- " + msg,LuaNil.nil,"error",LuaNil.nil,LuaNil.nil});
    }
    // function appmiddlewareinvoker ( inputparam, isBlocking, indicator, datasetID )
    public static LuaTable appmiddlewareinvoker(LuaTable inputparam,Object isBlocking,Object indicator,Object datasetID){
      // local url = "http://null/".."middleware/MWServlet";
      String url = "http://null/" + "middleware/MWServlet";
      // local sessionIdKey = "cacheid";
      String sessionIdKey = "cacheid";
      // inputparam[ "appID" ] = "A1";
      inputparam.setTable("appID", "A1");
      // inputparam[ "channel" ] = konychannel;
      inputparam.setTable("channel", Rcchannel.konychannel);
      // inputparam[ kiden ] = os.useragent();
      inputparam.setTable(Rcchannel.kiden, OS.userAgent());
      // inputparam[ "appver" ] = "1.0.0";
      inputparam.setTable("appver", "1.0.0");
      // inputparam[ "platform" ] = os.platform().name;
      inputparam.setTable("platform", ((LuaTable)(OS.platform())).getTable("name"));
      // if ( ( indicator ~= nil ) ) then
      if(((Object)indicator) != LuaNil.nil){
        // inputparam[ "indicator" ] = indicator;
        inputparam.setTable("indicator", indicator);
      }
      // if ( ( datasetID ~= nil ) ) then
      if(((Object)datasetID) != LuaNil.nil){
        // inputparam[ "datasetID" ] = datasetID;
        inputparam.setTable("datasetID", datasetID);
      }
      // inputparam[ sessionIdKey ] = sessionID;
      inputparam.setTable(sessionIdKey, sessionID);
      // if ( ( globalhttpheaders ~= nil ) ) then
      if(((Object)globalhttpheaders) != LuaNil.nil){
        // if ( ( inputparam[ "httpheaders" ] ~= nil ) ) then
        if(((Object)((LuaTable)(inputparam)).getTable("httpheaders")) != LuaNil.nil){
          // inputparam[ "httpheaders" ] = table.append( inputparam[ "httpheaders" ], globalhttpheaders );
          inputparam.setTable("httpheaders", Table.append(new Object[] {((LuaTable)(inputparam)).getTable("httpheaders"),globalhttpheaders}));
        }else{
          // inputparam[ "httpheaders" ] = globalhttpheaders;
          inputparam.setTable("httpheaders", globalhttpheaders);
        }
      }
      // local resulttable = net.invokeservice( url, inputparam, isBlocking );
      LuaTable resulttable = (LuaTable) Net.invokeService(new Object[] {url,inputparam,isBlocking});
      // if ( ( resulttable ~= nil ) ) then
      if(((Object)resulttable) != LuaNil.nil){
        // if ( ( resulttable[ sessionIdKey ] ~= nil ) ) then
        if(((Object)((LuaTable)(resulttable)).getTable(sessionIdKey)) != LuaNil.nil){
          // sessionID = resulttable[ sessionIdKey ];
          sessionID = (String) ((LuaTable)(resulttable)).getTable(sessionIdKey);
        }
      }
      // return resulttable;
      return resulttable;
    }
    // function appmiddlewaresecureinvoker ( inputparam, isBlocking, indicator, datasetID )
    public static LuaTable appmiddlewaresecureinvoker(LuaTable inputparam,Object isBlocking,Object indicator,Object datasetID){
      // local url = "https://null/".."middleware/MWServlet";
      String url = "https://null/" + "middleware/MWServlet";
      // local sessionIdKey = "cacheid";
      String sessionIdKey = "cacheid";
      // inputparam[ "appID" ] = "A1";
      inputparam.setTable("appID", "A1");
      // inputparam[ "channel" ] = konychannel;
      inputparam.setTable("channel", Rcchannel.konychannel);
      // inputparam[ kiden ] = os.useragent();
      inputparam.setTable(Rcchannel.kiden, OS.userAgent());
      // inputparam[ "appver" ] = "1.0.0";
      inputparam.setTable("appver", "1.0.0");
      // inputparam[ "platform" ] = os.platform().name;
      inputparam.setTable("platform", ((LuaTable)(OS.platform())).getTable("name"));
      // if ( ( indicator ~= nil ) ) then
      if(((Object)indicator) != LuaNil.nil){
        // inputparam[ "indicator" ] = indicator;
        inputparam.setTable("indicator", indicator);
      }
      // if ( ( datasetID ~= nil ) ) then
      if(((Object)datasetID) != LuaNil.nil){
        // inputparam[ "datasetID" ] = datasetID;
        inputparam.setTable("datasetID", datasetID);
      }
      // inputparam[ sessionIdKey ] = sessionID;
      inputparam.setTable(sessionIdKey, sessionID);
      // if ( ( globalhttpheaders ~= nil ) ) then
      if(((Object)globalhttpheaders) != LuaNil.nil){
        // if ( ( inputparam[ "httpheaders" ] ~= nil ) ) then
        if(((Object)((LuaTable)(inputparam)).getTable("httpheaders")) != LuaNil.nil){
          // inputparam[ "httpheaders" ] = table.append( inputparam[ "httpheaders" ], globalhttpheaders );
          inputparam.setTable("httpheaders", Table.append(new Object[] {((LuaTable)(inputparam)).getTable("httpheaders"),globalhttpheaders}));
        }else{
          // inputparam[ "httpheaders" ] = globalhttpheaders;
          inputparam.setTable("httpheaders", globalhttpheaders);
        }
      }
      // local resulttable = net.invokeservice( url, inputparam, isBlocking );
      LuaTable resulttable = (LuaTable) Net.invokeService(new Object[] {url,inputparam,isBlocking});
      // if ( ( resulttable ~= nil ) ) then
      if(((Object)resulttable) != LuaNil.nil){
        // if ( ( resulttable[ sessionIdKey ] ~= nil ) ) then
        if(((Object)((LuaTable)(resulttable)).getTable(sessionIdKey)) != LuaNil.nil){
          // sessionID = resulttable[ sessionIdKey ];
          sessionID = (String) ((LuaTable)(resulttable)).getTable(sessionIdKey);
        }
      }
      // return resulttable;
      return resulttable;
    }
    // function appmiddlewareinvokerasync ( inputparam, callback )
    public static Object appmiddlewareinvokerasync(LuaTable inputparam,Object callback){
      // local url = "http://null/".."middleware/MWServlet";
      String url = "http://null/" + "middleware/MWServlet";
      // local sessionIdKey = "cacheid";
      String sessionIdKey = "cacheid";
      // inputparam[ "appID" ] = "A1";
      inputparam.setTable("appID", "A1");
      // inputparam[ "channel" ] = konychannel;
      inputparam.setTable("channel", Rcchannel.konychannel);
      // inputparam[ kiden ] = os.useragent();
      inputparam.setTable(Rcchannel.kiden, OS.userAgent());
      // inputparam[ "appver" ] = "1.0.0";
      inputparam.setTable("appver", "1.0.0");
      // inputparam[ "platform" ] = os.platform().name;
      inputparam.setTable("platform", ((LuaTable)(OS.platform())).getTable("name"));
      // if ( ( indicator ~= nil ) ) then
      if(((Object)indicator) != LuaNil.nil){
        // inputparam[ "indicator" ] = indicator;
        inputparam.setTable("indicator", indicator);
      }
      // if ( ( datasetID ~= nil ) ) then
      if(((Object)datasetID) != LuaNil.nil){
        // inputparam[ "datasetID" ] = datasetID;
        inputparam.setTable("datasetID", datasetID);
      }
      // inputparam[ sessionIdKey ] = sessionID;
      inputparam.setTable(sessionIdKey, sessionID);
      // if ( ( globalhttpheaders ~= nil ) ) then
      if(((Object)globalhttpheaders) != LuaNil.nil){
        // if ( ( inputparam[ "httpheaders" ] ~= nil ) ) then
        if(((Object)((LuaTable)(inputparam)).getTable("httpheaders")) != LuaNil.nil){
          // inputparam[ "httpheaders" ] = table.append( inputparam[ "httpheaders" ], globalhttpheaders );
          inputparam.setTable("httpheaders", Table.append(new Object[] {((LuaTable)(inputparam)).getTable("httpheaders"),globalhttpheaders}));
        }else{
          // inputparam[ "httpheaders" ] = globalhttpheaders;
          inputparam.setTable("httpheaders", globalhttpheaders);
        }
      }
      // local connHandle = net.invokeserviceasync( url, inputparam, callback );
      Object connHandle = Net.invokeServiceAsync(new Object[] {url,inputparam,callback});
      // return connHandle;
      return connHandle;
    }
    // function appmiddlewaresecureinvokerasync ( inputparam, callback )
    public static Object appmiddlewaresecureinvokerasync(LuaTable inputparam,Object callback){
      // local url = "https://null/".."middleware/MWServlet";
      String url = "https://null/" + "middleware/MWServlet";
      // local sessionIdKey = "cacheid";
      String sessionIdKey = "cacheid";
      // inputparam[ "appID" ] = "A1";
      inputparam.setTable("appID", "A1");
      // inputparam[ "channel" ] = konychannel;
      inputparam.setTable("channel", Rcchannel.konychannel);
      // inputparam[ kiden ] = os.useragent();
      inputparam.setTable(Rcchannel.kiden, OS.userAgent());
      // inputparam[ "appver" ] = "1.0.0";
      inputparam.setTable("appver", "1.0.0");
      // inputparam[ "platform" ] = os.platform().name;
      inputparam.setTable("platform", ((LuaTable)(OS.platform())).getTable("name"));
      // if ( ( indicator ~= nil ) ) then
      if(((Object)indicator) != LuaNil.nil){
        // inputparam[ "indicator" ] = indicator;
        inputparam.setTable("indicator", indicator);
      }
      // if ( ( datasetID ~= nil ) ) then
      if(((Object)datasetID) != LuaNil.nil){
        // inputparam[ "datasetID" ] = datasetID;
        inputparam.setTable("datasetID", datasetID);
      }
      // inputparam[ sessionIdKey ] = sessionID;
      inputparam.setTable(sessionIdKey, sessionID);
      // if ( ( globalhttpheaders ~= nil ) ) then
      if(((Object)globalhttpheaders) != LuaNil.nil){
        // if ( ( inputparam[ "httpheaders" ] ~= nil ) ) then
        if(((Object)((LuaTable)(inputparam)).getTable("httpheaders")) != LuaNil.nil){
          // inputparam[ "httpheaders" ] = table.append( inputparam[ "httpheaders" ], globalhttpheaders );
          inputparam.setTable("httpheaders", Table.append(new Object[] {((LuaTable)(inputparam)).getTable("httpheaders"),globalhttpheaders}));
        }else{
          // inputparam[ "httpheaders" ] = globalhttpheaders;
          inputparam.setTable("httpheaders", globalhttpheaders);
        }
      }
      // local connHandle = net.invokeserviceasync( url, inputparam, callback );
      Object connHandle = Net.invokeServiceAsync(new Object[] {url,inputparam,callback});
      // return connHandle;
      return connHandle;
    }
    // function makecall ( eventobject )
    public static void makecall(Object eventobject){
      // phone.dial( eventobject.text );
      com.konylabs.nativecodegen.api.Phone.dial(new Object[] {((LuaTable)(eventobject)).getTable("text")});
    }
}
Generating... Appskins
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Appskins {
    public static LuaTable blueplain = null;
    public static LuaTable blueround = null;
    public static LuaTable blueroundchk = null;
    public static LuaTable blueroundFocus = null;
    public static LuaTable blueroundrad = null;
    public static LuaTable formgrad = null;
    public static LuaTable gradroundbtn = null;
    public static LuaTable gradroundcal = null;
    public static LuaTable gradroundcam = null;
    public static LuaTable gradroundcom = null;
    public static LuaTable gradroundFocus = null;
    public static LuaTable gradroundfocusbtn = null;
    public static LuaTable gradroundlist = null;
    public static LuaTable gradroundph = null;
    public static LuaTable grey = null;
    public static LuaTable konydata = null;
    public static LuaTable konyformnorm = null;
    public static LuaTable konygreytxtar = null;
    public static LuaTable konygreytxtbx = null;
    public static LuaTable konyline = null;
    public static LuaTable konyrctxt = null;
    public static LuaTable konysegfocus = null;
    public static LuaTable konysegnorm = null;
    public static LuaTable konyslide = null;
    public static LuaTable konytextar = null;
    public static LuaTable konytextarfocus = null;
    public static LuaTable konytxtfocus = null;
    public static LuaTable konytxtnorm = null;
    public static LuaTable rowskin = null;
    public static LuaTable trans = null;
    public static LuaTable transfontblue = null;
    public static LuaTable transfontFocused = null;
    public static LuaTable whiteround = null;
    public static LuaTable whiteroundFocused = null;
    public static LuaTable whiteroundrichtxt = null;
    public static LuaTable whiteroundseg = null;
    public static LuaTable whiteroundta = null;
    public static LuaTable whiterounftb = null;
    // function skinsinit ()
    public static void skinsinit(){
      // blueplain = window.Skin( "blueplain" );
      blueplain = (LuaTable) Window.createSkin(new Object[] {"blueplain"});
      // blueplain.bg_type = "one";
      blueplain.setTable("bg_type", "one");
      // blueplain.background_color = "96beff00";
      blueplain.setTable("background_color", "96beff00");
      // blueplain.font_size = 133;
      blueplain.setTable("font_size", new Double(133));
      // blueplain.font_color = "ffffff00";
      blueplain.setTable("font_color", "ffffff00");
      // blueplain.border_style = "plain";
      blueplain.setTable("border_style", "plain");
      // blueround = window.Skin( "blueround" );
      blueround = (LuaTable) Window.createSkin(new Object[] {"blueround"});
      // blueround.bg_type = "one";
      blueround.setTable("bg_type", "one");
      // blueround.background_color = "96beff00";
      blueround.setTable("background_color", "96beff00");
      // blueround.font_color = "00000000";
      blueround.setTable("font_color", "00000000");
      // blueround.border_color = "96beff00";
      blueround.setTable("border_color", "96beff00");
      // blueround.border_width = 2;
      blueround.setTable("border_width", new Double(2));
      // blueround.border_style = "rc";
      blueround.setTable("border_style", "rc");
      // blueroundchk = window.Skin( "blueroundchk" );
      blueroundchk = (LuaTable) Window.createSkin(new Object[] {"blueroundchk"});
      // blueroundchk.bg_type = "one";
      blueroundchk.setTable("bg_type", "one");
      // blueroundchk.background_color = "96beff00";
      blueroundchk.setTable("background_color", "96beff00");
      // blueroundchk.font_color = "00000000";
      blueroundchk.setTable("font_color", "00000000");
      // blueroundchk.border_color = "96beff00";
      blueroundchk.setTable("border_color", "96beff00");
      // blueroundchk.border_width = 2;
      blueroundchk.setTable("border_width", new Double(2));
      // blueroundchk.border_style = "rc";
      blueroundchk.setTable("border_style", "rc");
      // blueroundFocus = window.Skin( "blueroundFocus" );
      blueroundFocus = (LuaTable) Window.createSkin(new Object[] {"blueroundFocus"});
      // blueroundFocus.bg_type = "one";
      blueroundFocus.setTable("bg_type", "one");
      // blueroundFocus.background_color = "b7d2ff00";
      blueroundFocus.setTable("background_color", "b7d2ff00");
      // blueroundFocus.font_color = "00000000";
      blueroundFocus.setTable("font_color", "00000000");
      // blueroundFocus.border_color = "b7d2ff00";
      blueroundFocus.setTable("border_color", "b7d2ff00");
      // blueroundFocus.border_width = 2;
      blueroundFocus.setTable("border_width", new Double(2));
      // blueroundFocus.border_style = "rc";
      blueroundFocus.setTable("border_style", "rc");
      // blueroundrad = window.Skin( "blueroundrad" );
      blueroundrad = (LuaTable) Window.createSkin(new Object[] {"blueroundrad"});
      // blueroundrad.bg_type = "one";
      blueroundrad.setTable("bg_type", "one");
      // blueroundrad.background_color = "96beff00";
      blueroundrad.setTable("background_color", "96beff00");
      // blueroundrad.font_color = "00000000";
      blueroundrad.setTable("font_color", "00000000");
      // blueroundrad.border_color = "96beff00";
      blueroundrad.setTable("border_color", "96beff00");
      // blueroundrad.border_width = 2;
      blueroundrad.setTable("border_width", new Double(2));
      // blueroundrad.border_style = "rc";
      blueroundrad.setTable("border_style", "rc");
      // formgrad = window.Skin( "formgrad" );
      formgrad = (LuaTable) Window.createSkin(new Object[] {"formgrad"});
      // formgrad.bg_type = "two";
      formgrad.setTable("bg_type", "two");
      // formgrad.background_style = "vg";
      formgrad.setTable("background_style", "vg");
      // formgrad.background_gradient_top_color = "ffffff00";
      formgrad.setTable("background_gradient_top_color", "ffffff00");
      // formgrad.background_gradient_bottom_color = "d2e3ff00";
      formgrad.setTable("background_gradient_bottom_color", "d2e3ff00");
      // formgrad.font_color = "00000000";
      formgrad.setTable("font_color", "00000000");
      // formgrad.border_style = "plain";
      formgrad.setTable("border_style", "plain");
      // gradroundbtn = window.Skin( "gradroundbtn" );
      gradroundbtn = (LuaTable) Window.createSkin(new Object[] {"gradroundbtn"});
      // gradroundbtn.bg_type = "one";
      gradroundbtn.setTable("bg_type", "one");
      // gradroundbtn.background_color = "bfd8ff00";
      gradroundbtn.setTable("background_color", "bfd8ff00");
      // gradroundbtn.font_color = "00000000";
      gradroundbtn.setTable("font_color", "00000000");
      // gradroundbtn.border_color = "8db9fa00";
      gradroundbtn.setTable("border_color", "8db9fa00");
      // gradroundbtn.border_width = 2;
      gradroundbtn.setTable("border_width", new Double(2));
      // gradroundbtn.border_style = "rc";
      gradroundbtn.setTable("border_style", "rc");
      // gradroundcal = window.Skin( "gradroundcal" );
      gradroundcal = (LuaTable) Window.createSkin(new Object[] {"gradroundcal"});
      // gradroundcal.background_style = "vg";
      gradroundcal.setTable("background_style", "vg");
      // gradroundcal.bg_type = "two";
      gradroundcal.setTable("bg_type", "two");
      // gradroundcal.background_gradient_top_color = "ffffff00";
      gradroundcal.setTable("background_gradient_top_color", "ffffff00");
      // gradroundcal.background_gradient_bottom_color = "96beff00";
      gradroundcal.setTable("background_gradient_bottom_color", "96beff00");
      // gradroundcal.font_color = "00000000";
      gradroundcal.setTable("font_color", "00000000");
      // gradroundcal.border_color = "8db9fa00";
      gradroundcal.setTable("border_color", "8db9fa00");
      // gradroundcal.border_width = 2;
      gradroundcal.setTable("border_width", new Double(2));
      // gradroundcal.border_style = "rc";
      gradroundcal.setTable("border_style", "rc");
      // gradroundcam = window.Skin( "gradroundcam" );
      gradroundcam = (LuaTable) Window.createSkin(new Object[] {"gradroundcam"});
      // gradroundcam.background_style = "vg";
      gradroundcam.setTable("background_style", "vg");
      // gradroundcam.bg_type = "two";
      gradroundcam.setTable("bg_type", "two");
      // gradroundcam.background_gradient_top_color = "ffffff00";
      gradroundcam.setTable("background_gradient_top_color", "ffffff00");
      // gradroundcam.background_gradient_bottom_color = "96beff00";
      gradroundcam.setTable("background_gradient_bottom_color", "96beff00");
      // gradroundcam.font_color = "00000000";
      gradroundcam.setTable("font_color", "00000000");
      // gradroundcam.border_color = "8db9fa00";
      gradroundcam.setTable("border_color", "8db9fa00");
      // gradroundcam.border_width = 2;
      gradroundcam.setTable("border_width", new Double(2));
      // gradroundcam.border_style = "rc";
      gradroundcam.setTable("border_style", "rc");
      // gradroundcom = window.Skin( "gradroundcom" );
      gradroundcom = (LuaTable) Window.createSkin(new Object[] {"gradroundcom"});
      // gradroundcom.background_style = "vg";
      gradroundcom.setTable("background_style", "vg");
      // gradroundcom.bg_type = "two";
      gradroundcom.setTable("bg_type", "two");
      // gradroundcom.background_gradient_top_color = "ffffff00";
      gradroundcom.setTable("background_gradient_top_color", "ffffff00");
      // gradroundcom.background_gradient_bottom_color = "96beff00";
      gradroundcom.setTable("background_gradient_bottom_color", "96beff00");
      // gradroundcom.font_color = "00000000";
      gradroundcom.setTable("font_color", "00000000");
      // gradroundcom.border_color = "8db9fa00";
      gradroundcom.setTable("border_color", "8db9fa00");
      // gradroundcom.border_width = 2;
      gradroundcom.setTable("border_width", new Double(2));
      // gradroundcom.border_style = "rc";
      gradroundcom.setTable("border_style", "rc");
      // gradroundFocus = window.Skin( "gradroundFocus" );
      gradroundFocus = (LuaTable) Window.createSkin(new Object[] {"gradroundFocus"});
      // gradroundFocus.background_style = "vg";
      gradroundFocus.setTable("background_style", "vg");
      // gradroundFocus.bg_type = "two";
      gradroundFocus.setTable("bg_type", "two");
      // gradroundFocus.background_gradient_top_color = "96beff00";
      gradroundFocus.setTable("background_gradient_top_color", "96beff00");
      // gradroundFocus.background_gradient_bottom_color = "ffffff00";
      gradroundFocus.setTable("background_gradient_bottom_color", "ffffff00");
      // gradroundFocus.font_color = "00000000";
      gradroundFocus.setTable("font_color", "00000000");
      // gradroundFocus.border_color = "b7d2ff00";
      gradroundFocus.setTable("border_color", "b7d2ff00");
      // gradroundFocus.border_width = 2;
      gradroundFocus.setTable("border_width", new Double(2));
      // gradroundFocus.border_style = "rc";
      gradroundFocus.setTable("border_style", "rc");
      // gradroundfocusbtn = window.Skin( "gradroundfocusbtn" );
      gradroundfocusbtn = (LuaTable) Window.createSkin(new Object[] {"gradroundfocusbtn"});
      // gradroundfocusbtn.background_style = "vg";
      gradroundfocusbtn.setTable("background_style", "vg");
      // gradroundfocusbtn.bg_type = "two";
      gradroundfocusbtn.setTable("bg_type", "two");
      // gradroundfocusbtn.background_gradient_top_color = "96beff00";
      gradroundfocusbtn.setTable("background_gradient_top_color", "96beff00");
      // gradroundfocusbtn.background_gradient_bottom_color = "ffffff00";
      gradroundfocusbtn.setTable("background_gradient_bottom_color", "ffffff00");
      // gradroundfocusbtn.font_color = "00000000";
      gradroundfocusbtn.setTable("font_color", "00000000");
      // gradroundfocusbtn.border_color = "b7d2ff00";
      gradroundfocusbtn.setTable("border_color", "b7d2ff00");
      // gradroundfocusbtn.border_width = 2;
      gradroundfocusbtn.setTable("border_width", new Double(2));
      // gradroundfocusbtn.border_style = "rc";
      gradroundfocusbtn.setTable("border_style", "rc");
      // gradroundlist = window.Skin( "gradroundlist" );
      gradroundlist = (LuaTable) Window.createSkin(new Object[] {"gradroundlist"});
      // gradroundlist.background_style = "vg";
      gradroundlist.setTable("background_style", "vg");
      // gradroundlist.bg_type = "two";
      gradroundlist.setTable("bg_type", "two");
      // gradroundlist.background_gradient_top_color = "ffffff00";
      gradroundlist.setTable("background_gradient_top_color", "ffffff00");
      // gradroundlist.background_gradient_bottom_color = "96beff00";
      gradroundlist.setTable("background_gradient_bottom_color", "96beff00");
      // gradroundlist.font_color = "00000000";
      gradroundlist.setTable("font_color", "00000000");
      // gradroundlist.border_color = "8db9fa00";
      gradroundlist.setTable("border_color", "8db9fa00");
      // gradroundlist.border_width = 2;
      gradroundlist.setTable("border_width", new Double(2));
      // gradroundlist.border_style = "rc";
      gradroundlist.setTable("border_style", "rc");
      // gradroundph = window.Skin( "gradroundph" );
      gradroundph = (LuaTable) Window.createSkin(new Object[] {"gradroundph"});
      // gradroundph.background_style = "vg";
      gradroundph.setTable("background_style", "vg");
      // gradroundph.bg_type = "two";
      gradroundph.setTable("bg_type", "two");
      // gradroundph.background_gradient_top_color = "ffffff00";
      gradroundph.setTable("background_gradient_top_color", "ffffff00");
      // gradroundph.background_gradient_bottom_color = "96beff00";
      gradroundph.setTable("background_gradient_bottom_color", "96beff00");
      // gradroundph.font_color = "00000000";
      gradroundph.setTable("font_color", "00000000");
      // gradroundph.border_color = "8db9fa00";
      gradroundph.setTable("border_color", "8db9fa00");
      // gradroundph.border_width = 2;
      gradroundph.setTable("border_width", new Double(2));
      // gradroundph.border_style = "rc";
      gradroundph.setTable("border_style", "rc");
      // grey = window.Skin( "grey" );
      grey = (LuaTable) Window.createSkin(new Object[] {"grey"});
      // grey.border_style = "plain";
      grey.setTable("border_style", "plain");
      // konydata = window.Skin( "konydata" );
      konydata = (LuaTable) Window.createSkin(new Object[] {"konydata"});
      // konydata.bg_type = "one";
      konydata.setTable("bg_type", "one");
      // konydata.background_color = "80b6e500";
      konydata.setTable("background_color", "80b6e500");
      // konydata.font_color = "00000000";
      konydata.setTable("font_color", "00000000");
      // konydata.border_style = "plain";
      konydata.setTable("border_style", "plain");
      // konyformnorm = window.Skin( "konyformnorm" );
      konyformnorm = (LuaTable) Window.createSkin(new Object[] {"konyformnorm"});
      // konyformnorm.bg_type = "two";
      konyformnorm.setTable("bg_type", "two");
      // konyformnorm.background_style = "vg";
      konyformnorm.setTable("background_style", "vg");
      // konyformnorm.background_gradient_top_color = "c0c0c000";
      konyformnorm.setTable("background_gradient_top_color", "c0c0c000");
      // konyformnorm.background_gradient_bottom_color = "f4f4f400";
      konyformnorm.setTable("background_gradient_bottom_color", "f4f4f400");
      // konyformnorm.font_color = "00000000";
      konyformnorm.setTable("font_color", "00000000");
      // konyformnorm.border_style = "plain";
      konyformnorm.setTable("border_style", "plain");
      // konygreytxtar = window.Skin( "konygreytxtar" );
      konygreytxtar = (LuaTable) Window.createSkin(new Object[] {"konygreytxtar"});
      // konygreytxtar.font_color = "00000000";
      konygreytxtar.setTable("font_color", "00000000");
      // konygreytxtar.border_color = "69696700";
      konygreytxtar.setTable("border_color", "69696700");
      // konygreytxtar.border_width = 1;
      konygreytxtar.setTable("border_width", new Double(1));
      // konygreytxtar.border_style = "rc";
      konygreytxtar.setTable("border_style", "rc");
      // konygreytxtbx = window.Skin( "konygreytxtbx" );
      konygreytxtbx = (LuaTable) Window.createSkin(new Object[] {"konygreytxtbx"});
      // konygreytxtbx.font_color = "00000000";
      konygreytxtbx.setTable("font_color", "00000000");
      // konygreytxtbx.border_color = "69696700";
      konygreytxtbx.setTable("border_color", "69696700");
      // konygreytxtbx.border_width = 1;
      konygreytxtbx.setTable("border_width", new Double(1));
      // konygreytxtbx.border_style = "rc";
      konygreytxtbx.setTable("border_style", "rc");
      // konyline = window.Skin( "konyline" );
      konyline = (LuaTable) Window.createSkin(new Object[] {"konyline"});
      // konyline.bg_type = "one";
      konyline.setTable("bg_type", "one");
      // konyline.background_color = "80b6e500";
      konyline.setTable("background_color", "80b6e500");
      // konyline.border_style = "plain";
      konyline.setTable("border_style", "plain");
      // konyrctxt = window.Skin( "konyrctxt" );
      konyrctxt = (LuaTable) Window.createSkin(new Object[] {"konyrctxt"});
      // konyrctxt.bg_type = "one";
      konyrctxt.setTable("bg_type", "one");
      // konyrctxt.background_color = "ffffff00";
      konyrctxt.setTable("background_color", "ffffff00");
      // konyrctxt.font_color = "00000000";
      konyrctxt.setTable("font_color", "00000000");
      // konyrctxt.border_color = "96beff00";
      konyrctxt.setTable("border_color", "96beff00");
      // konyrctxt.border_width = 2;
      konyrctxt.setTable("border_width", new Double(2));
      // konyrctxt.border_style = "rc";
      konyrctxt.setTable("border_style", "rc");
      // konysegfocus = window.Skin( "konysegfocus" );
      konysegfocus = (LuaTable) Window.createSkin(new Object[] {"konysegfocus"});
      // konysegfocus.bg_type = "one";
      konysegfocus.setTable("bg_type", "one");
      // konysegfocus.background_color = "f99f1100";
      konysegfocus.setTable("background_color", "f99f1100");
      // konysegfocus.font_color = "ffffff00";
      konysegfocus.setTable("font_color", "ffffff00");
      // konysegfocus.border_color = "00000000";
      konysegfocus.setTable("border_color", "00000000");
      // konysegfocus.border_width = 1;
      konysegfocus.setTable("border_width", new Double(1));
      // konysegfocus.border_style = "plain";
      konysegfocus.setTable("border_style", "plain");
      // konysegnorm = window.Skin( "konysegnorm" );
      konysegnorm = (LuaTable) Window.createSkin(new Object[] {"konysegnorm"});
      // konysegnorm.bg_type = "one";
      konysegnorm.setTable("bg_type", "one");
      // konysegnorm.background_color = "80b6e500";
      konysegnorm.setTable("background_color", "80b6e500");
      // konysegnorm.font_color = "ffffff00";
      konysegnorm.setTable("font_color", "ffffff00");
      // konysegnorm.border_color = "00000000";
      konysegnorm.setTable("border_color", "00000000");
      // konysegnorm.border_width = 1;
      konysegnorm.setTable("border_width", new Double(1));
      // konysegnorm.border_style = "plain";
      konysegnorm.setTable("border_style", "plain");
      // konyslide = window.Skin( "konyslide" );
      konyslide = (LuaTable) Window.createSkin(new Object[] {"konyslide"});
      // konyslide.bg_type = "one";
      konyslide.setTable("bg_type", "one");
      // konyslide.background_color = "80b6e500";
      konyslide.setTable("background_color", "80b6e500");
      // konyslide.font_color = "00000000";
      konyslide.setTable("font_color", "00000000");
      // konyslide.border_style = "plain";
      konyslide.setTable("border_style", "plain");
      // konytextar = window.Skin( "konytextar" );
      konytextar = (LuaTable) Window.createSkin(new Object[] {"konytextar"});
      // konytextar.bg_type = "one";
      konytextar.setTable("bg_type", "one");
      // konytextar.background_color = "80b6e500";
      konytextar.setTable("background_color", "80b6e500");
      // konytextar.font_color = "ffffff00";
      konytextar.setTable("font_color", "ffffff00");
      // konytextar.border_color = "00000000";
      konytextar.setTable("border_color", "00000000");
      // konytextar.border_width = 1;
      konytextar.setTable("border_width", new Double(1));
      // konytextar.border_style = "plain";
      konytextar.setTable("border_style", "plain");
      // konytextarfocus = window.Skin( "konytextarfocus" );
      konytextarfocus = (LuaTable) Window.createSkin(new Object[] {"konytextarfocus"});
      // konytextarfocus.bg_type = "one";
      konytextarfocus.setTable("bg_type", "one");
      // konytextarfocus.background_color = "f99f1100";
      konytextarfocus.setTable("background_color", "f99f1100");
      // konytextarfocus.font_color = "ffffff00";
      konytextarfocus.setTable("font_color", "ffffff00");
      // konytextarfocus.border_color = "00000000";
      konytextarfocus.setTable("border_color", "00000000");
      // konytextarfocus.border_width = 1;
      konytextarfocus.setTable("border_width", new Double(1));
      // konytextarfocus.border_style = "plain";
      konytextarfocus.setTable("border_style", "plain");
      // konytxtfocus = window.Skin( "konytxtfocus" );
      konytxtfocus = (LuaTable) Window.createSkin(new Object[] {"konytxtfocus"});
      // konytxtfocus.bg_type = "one";
      konytxtfocus.setTable("bg_type", "one");
      // konytxtfocus.background_color = "f99f1100";
      konytxtfocus.setTable("background_color", "f99f1100");
      // konytxtfocus.font_color = "ffffff00";
      konytxtfocus.setTable("font_color", "ffffff00");
      // konytxtfocus.border_color = "00000000";
      konytxtfocus.setTable("border_color", "00000000");
      // konytxtfocus.border_width = 1;
      konytxtfocus.setTable("border_width", new Double(1));
      // konytxtfocus.border_style = "plain";
      konytxtfocus.setTable("border_style", "plain");
      // konytxtnorm = window.Skin( "konytxtnorm" );
      konytxtnorm = (LuaTable) Window.createSkin(new Object[] {"konytxtnorm"});
      // konytxtnorm.bg_type = "one";
      konytxtnorm.setTable("bg_type", "one");
      // konytxtnorm.background_color = "80b6e500";
      konytxtnorm.setTable("background_color", "80b6e500");
      // konytxtnorm.font_color = "ffffff00";
      konytxtnorm.setTable("font_color", "ffffff00");
      // konytxtnorm.border_color = "00000000";
      konytxtnorm.setTable("border_color", "00000000");
      // konytxtnorm.border_width = 1;
      konytxtnorm.setTable("border_width", new Double(1));
      // konytxtnorm.border_style = "plain";
      konytxtnorm.setTable("border_style", "plain");
      // rowskin = window.Skin( "rowskin" );
      rowskin = (LuaTable) Window.createSkin(new Object[] {"rowskin"});
      // rowskin.font_color = "00000000";
      rowskin.setTable("font_color", "00000000");
      // rowskin.border_style = "plain";
      rowskin.setTable("border_style", "plain");
      // trans = window.Skin( "trans" );
      trans = (LuaTable) Window.createSkin(new Object[] {"trans"});
      // trans.font_color = "00000000";
      trans.setTable("font_color", "00000000");
      // trans.border_style = "plain";
      trans.setTable("border_style", "plain");
      // transfontblue = window.Skin( "transfontblue" );
      transfontblue = (LuaTable) Window.createSkin(new Object[] {"transfontblue"});
      // transfontblue.font_style = "underline";
      transfontblue.setTable("font_style", "underline");
      // transfontblue.font_color = "0000a000";
      transfontblue.setTable("font_color", "0000a000");
      // transfontblue.border_style = "plain";
      transfontblue.setTable("border_style", "plain");
      // transfontFocused = window.Skin( "transfontFocused" );
      transfontFocused = (LuaTable) Window.createSkin(new Object[] {"transfontFocused"});
      // transfontFocused.font_style = "underline";
      transfontFocused.setTable("font_style", "underline");
      // transfontFocused.font_color = "96beff00";
      transfontFocused.setTable("font_color", "96beff00");
      // transfontFocused.border_style = "plain";
      transfontFocused.setTable("border_style", "plain");
      // whiteround = window.Skin( "whiteround" );
      whiteround = (LuaTable) Window.createSkin(new Object[] {"whiteround"});
      // whiteround.bg_type = "one";
      whiteround.setTable("bg_type", "one");
      // whiteround.background_color = "ffffff00";
      whiteround.setTable("background_color", "ffffff00");
      // whiteround.font_color = "00000000";
      whiteround.setTable("font_color", "00000000");
      // whiteround.border_color = "96beff00";
      whiteround.setTable("border_color", "96beff00");
      // whiteround.border_width = 2;
      whiteround.setTable("border_width", new Double(2));
      // whiteround.border_style = "rc";
      whiteround.setTable("border_style", "rc");
      // whiteroundFocused = window.Skin( "whiteroundFocused" );
      whiteroundFocused = (LuaTable) Window.createSkin(new Object[] {"whiteroundFocused"});
      // whiteroundFocused.bg_type = "one";
      whiteroundFocused.setTable("bg_type", "one");
      // whiteroundFocused.background_color = "ffffff00";
      whiteroundFocused.setTable("background_color", "ffffff00");
      // whiteroundFocused.font_color = "00000000";
      whiteroundFocused.setTable("font_color", "00000000");
      // whiteroundFocused.border_color = "0000ff00";
      whiteroundFocused.setTable("border_color", "0000ff00");
      // whiteroundFocused.border_width = 2;
      whiteroundFocused.setTable("border_width", new Double(2));
      // whiteroundFocused.border_style = "rc";
      whiteroundFocused.setTable("border_style", "rc");
      // whiteroundrichtxt = window.Skin( "whiteroundrichtxt" );
      whiteroundrichtxt = (LuaTable) Window.createSkin(new Object[] {"whiteroundrichtxt"});
      // whiteroundrichtxt.bg_type = "one";
      whiteroundrichtxt.setTable("bg_type", "one");
      // whiteroundrichtxt.background_color = "ffffff00";
      whiteroundrichtxt.setTable("background_color", "ffffff00");
      // whiteroundrichtxt.font_color = "00000000";
      whiteroundrichtxt.setTable("font_color", "00000000");
      // whiteroundrichtxt.border_color = "96beff00";
      whiteroundrichtxt.setTable("border_color", "96beff00");
      // whiteroundrichtxt.border_width = 2;
      whiteroundrichtxt.setTable("border_width", new Double(2));
      // whiteroundrichtxt.border_style = "rc";
      whiteroundrichtxt.setTable("border_style", "rc");
      // whiteroundseg = window.Skin( "whiteroundseg" );
      whiteroundseg = (LuaTable) Window.createSkin(new Object[] {"whiteroundseg"});
      // whiteroundseg.bg_type = "one";
      whiteroundseg.setTable("bg_type", "one");
      // whiteroundseg.background_color = "ffffff00";
      whiteroundseg.setTable("background_color", "ffffff00");
      // whiteroundseg.font_color = "00000000";
      whiteroundseg.setTable("font_color", "00000000");
      // whiteroundseg.border_color = "96beff00";
      whiteroundseg.setTable("border_color", "96beff00");
      // whiteroundseg.border_width = 4;
      whiteroundseg.setTable("border_width", new Double(4));
      // whiteroundseg.border_style = "rc";
      whiteroundseg.setTable("border_style", "rc");
      // whiteroundta = window.Skin( "whiteroundta" );
      whiteroundta = (LuaTable) Window.createSkin(new Object[] {"whiteroundta"});
      // whiteroundta.bg_type = "one";
      whiteroundta.setTable("bg_type", "one");
      // whiteroundta.background_color = "ffffff00";
      whiteroundta.setTable("background_color", "ffffff00");
      // whiteroundta.font_color = "00000000";
      whiteroundta.setTable("font_color", "00000000");
      // whiteroundta.border_color = "96beff00";
      whiteroundta.setTable("border_color", "96beff00");
      // whiteroundta.border_width = 2;
      whiteroundta.setTable("border_width", new Double(2));
      // whiteroundta.border_style = "rc";
      whiteroundta.setTable("border_style", "rc");
      // whiterounftb = window.Skin( "whiterounftb" );
      whiterounftb = (LuaTable) Window.createSkin(new Object[] {"whiterounftb"});
      // whiterounftb.bg_type = "one";
      whiterounftb.setTable("bg_type", "one");
      // whiterounftb.background_color = "ffffff00";
      whiterounftb.setTable("background_color", "ffffff00");
      // whiterounftb.font_color = "00000000";
      whiterounftb.setTable("font_color", "00000000");
      // whiterounftb.border_color = "96beff00";
      whiterounftb.setTable("border_color", "96beff00");
      // whiterounftb.border_width = 2;
      whiterounftb.setTable("border_width", new Double(2));
      // whiterounftb.border_style = "rc";
      whiterounftb.setTable("border_style", "rc");
    }
}
Generating... Form1
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Form1 {
    public static LuaTable Form1 = null;
    // function addwidgetsForm1 ()
    public static void addwidgetsForm1(){
      // local image1209475810266 = window.Image( "image1209475810266", nil, true, 7, false, false, 1, {
      // glossyEffect = "none";
      // gesturecode = "right gesture";
      // downloadprogressindicator = true;
      // imagewhenfailed = nil;
      // scalemode = 1;
      // margin = "1,1,1,1";
      // } );
      LuaTable psp4 = new LuaTable();
      psp4.setTable("glossyEffect", "none");
      psp4.setTable("gesturecode", "right gesture");
      psp4.setTable("downloadprogressindicator", Boolean.TRUE);
      psp4.setTable("imagewhenfailed", LuaNil.nil);
      psp4.setTable("scalemode", new Double(1));
      psp4.setTable("margin", "1,1,1,1");

      LuaTable image1209475810266 = Window.createImage(new Object[] {"image1209475810266",LuaNil.nil,Boolean.TRUE,new Double(7),Boolean.FALSE,Boolean.FALSE,new Double(1),psp4});
      // local map1209475810266 = window.Map( "map1209475810266", nil, "google", "1", nil, 14, true, {
      // initialZoomlevel = "14";
      // screenLevelWidget = true;
      // margin = "1,1,1,1";
      // } );
      LuaTable psp8 = new LuaTable();
      psp8.setTable("initialZoomlevel", "14");
      psp8.setTable("screenLevelWidget", Boolean.TRUE);
      psp8.setTable("margin", "1,1,1,1");

      LuaTable map1209475810266 = Window.createMap(new Object[] {"map1209475810266",LuaNil.nil,"google","1",LuaNil.nil,new Double(14),Boolean.TRUE,psp8});
      // local map1209475810268 = window.Map( "map1209475810268", nil, "google", "1", nil, 14, true, {
      // initialZoomlevel = "14";
      // screenLevelWidget = true;
      // margin = "1,1,1,1";
      // } );
      LuaTable psp12 = new LuaTable();
      psp12.setTable("initialZoomlevel", "14");
      psp12.setTable("screenLevelWidget", Boolean.TRUE);
      psp12.setTable("margin", "1,1,1,1");

      LuaTable map1209475810268 = Window.createMap(new Object[] {"map1209475810268",LuaNil.nil,"google","1",LuaNil.nil,new Double(14),Boolean.TRUE,psp12});
      // form.add( Form1, image1209475810266, map1209475810266, map1209475810268 );
      Form.add(new Object[] {Form1,image1209475810266,map1209475810266,map1209475810268});
    }
    // function Form1globals ()
    public static void Form1globals(){
      // local mid = {};
      LuaTable psp14 = new LuaTable();

      LuaTable mid = (LuaTable) psp14;
      // Form1 = window.Form( "Form1", formgrad, nil, "vertical", mid, nil, nil, addwidgetsForm1, nil, nil, {
      // needAppLevelMenu = "true";
      // menuRenderer = "true";
      // needAppLevelMenu = "true";
      // transitionDirection = "none";
      // transitionEffect = "none";
      // orientationmode = 0;
      // NeedsIndicatorDuringPostShow = true;
      // FormTransparencyDuringPostShow = 100;
      // enabledforidletimeout = false;
      // titleBar = "true";
      // titleBarBackgroundImage = nil;
      // renderTitleText = "true";
      // } );
      LuaTable psp18 = new LuaTable();
      psp18.setTable("needAppLevelMenu", "true");
      psp18.setTable("menuRenderer", "true");
      psp18.setTable("needAppLevelMenu", "true");
      psp18.setTable("transitionDirection", "none");
      psp18.setTable("transitionEffect", "none");
      psp18.setTable("orientationmode", new Double(0));
      psp18.setTable("NeedsIndicatorDuringPostShow", Boolean.TRUE);
      psp18.setTable("FormTransparencyDuringPostShow", new Double(100));
      psp18.setTable("enabledforidletimeout", Boolean.FALSE);
      psp18.setTable("titleBar", "true");
      psp18.setTable("titleBarBackgroundImage", LuaNil.nil);
      psp18.setTable("renderTitleText", "true");

      Form1 = Window.createForm(new Object[] {"Form1",Appskins.formgrad,LuaNil.nil,"vertical",mid,LuaNil.nil,LuaNil.nil,new Function() { public Object[] execute(Object[] params) throws Exception{addwidgetsForm1();return null; } },LuaNil.nil,LuaNil.nil,psp18});
    }
}
Generating... Globalsinit
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Globalsinit {
    public static LuaTable config = null;
    public static LuaTable startupform = null;
    // function globalsinit ()
    public static void globalsinit(){
      // skinsinit();
      Appskins.skinsinit();
      // config = {
      // appid = "A1";
      // appname = "A1";
      // appversion = "1.0.0";
      // platformversion = nil;
      // serverip = nil;
      // serverport = nil;
      // middlewarecontext = "middleware";
      // };
      LuaTable psp2 = new LuaTable();
      psp2.setTable("appid", "A1");
      psp2.setTable("appname", "A1");
      psp2.setTable("appversion", "1.0.0");
      psp2.setTable("platformversion", LuaNil.nil);
      psp2.setTable("serverip", LuaNil.nil);
      psp2.setTable("serverport", LuaNil.nil);
      psp2.setTable("middlewarecontext", "middleware");

      config = (LuaTable) psp2;
    }
    // function appinit ()
    public static void appinit(){
      // globalsinit();
      Globalsinit.globalsinit();
      // Form1globals();
      Form1.Form1globals();
      // map1globals();
      Map1.map1globals();
    }
    // function initializeApp ( ... )
    public static void initializeApp(Object arg){
      // sessionID = "";
      Application.sessionID = "";
      // appinit();
      Globalsinit.appinit();
      // startupform = Form1;
      startupform = Form1.Form1;
      // form.show( startupform );
      Form.show(new Object[] {startupform});
    }
    // function initThinClient ( initialContext )
    public static void initThinClient(Object initialContext){
      // initializeApp( initialContext );
      Globalsinit.initializeApp(initialContext);
    }
    // function sessionDeepLink ( deeplinkContext )
    public static void sessionDeepLink(Object deeplinkContext){
      // local startupform = Form1;
      startupform = Form1.Form1;
      // form.show( startupform );
      Form.show(new Object[] {startupform});
    }
}
Generating... Map1
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Map1 {
    public static LuaTable map1 = null;
    // function addwidgetsmap1 ()
    public static void addwidgetsmap1(){
      // local map1209475810264 = window.Map( "map1209475810264", nil, "google", "1", nil, 14, true, {
      // initialZoomlevel = "14";
      // screenLevelWidget = true;
      // margin = "1,1,1,1";
      // } );
      LuaTable psp4 = new LuaTable();
      psp4.setTable("initialZoomlevel", "14");
      psp4.setTable("screenLevelWidget", Boolean.TRUE);
      psp4.setTable("margin", "1,1,1,1");

      LuaTable map1209475810264 = Window.createMap(new Object[] {"map1209475810264",LuaNil.nil,"google","1",LuaNil.nil,new Double(14),Boolean.TRUE,psp4});
      // form.add( map1, map1209475810264 );
      Form.add(new Object[] {map1,map1209475810264});
    }
    // function map1globals ()
    public static void map1globals(){
      // local mid = {};
      LuaTable psp6 = new LuaTable();

      LuaTable mid = (LuaTable) psp6;
      // map1 = window.Form( "map1", formgrad, nil, "vertical", mid, nil, nil, addwidgetsmap1, nil, nil, {
      // needAppLevelMenu = "true";
      // menuRenderer = "true";
      // needAppLevelMenu = "true";
      // transitionDirection = "none";
      // transitionEffect = "none";
      // orientationmode = 0;
      // NeedsIndicatorDuringPostShow = true;
      // FormTransparencyDuringPostShow = 100;
      // enabledforidletimeout = false;
      // titleBar = "true";
      // titleBarBackgroundImage = nil;
      // renderTitleText = "true";
      // } );
      LuaTable psp10 = new LuaTable();
      psp10.setTable("needAppLevelMenu", "true");
      psp10.setTable("menuRenderer", "true");
      psp10.setTable("needAppLevelMenu", "true");
      psp10.setTable("transitionDirection", "none");
      psp10.setTable("transitionEffect", "none");
      psp10.setTable("orientationmode", new Double(0));
      psp10.setTable("NeedsIndicatorDuringPostShow", Boolean.TRUE);
      psp10.setTable("FormTransparencyDuringPostShow", new Double(100));
      psp10.setTable("enabledforidletimeout", Boolean.FALSE);
      psp10.setTable("titleBar", "true");
      psp10.setTable("titleBarBackgroundImage", LuaNil.nil);
      psp10.setTable("renderTitleText", "true");

      map1 = Window.createForm(new Object[] {"map1",Appskins.formgrad,LuaNil.nil,"vertical",mid,LuaNil.nil,LuaNil.nil,new Function() { public Object[] execute(Object[] params) throws Exception{addwidgetsmap1();return null; } },LuaNil.nil,LuaNil.nil,psp10});
    }
}
Generating... Rcchannel
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Rcchannel {
    public static String kiden = "rcid";
    public static String konychannel = "rc";
}
Generating... Startup
Globals... 
Output : package com.konylabs.NativeCodeApp;

import com.konylabs.nativecodegen.api.*;
import com.konylabs.vm.LuaTable;
import com.konylabs.vm.Function;
import com.konylabs.vm.LuaNil;

public class Startup {
}
