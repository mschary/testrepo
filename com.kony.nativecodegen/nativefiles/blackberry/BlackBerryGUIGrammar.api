--// Property Syntax :  <property_name> = <default_value> --<data_type>
--// Function Syntax :  <ret_val> = <function_name>(<parameter_name> --[[<data_type]] â) --<return_data_type>

skin = {
	background_color = 0xFFFFFF	--int
	,  background_gradient_top_color = 0xFFFFFF --int
	,  background_gradient_bottom_color = 0xFFFFFF --int
	,  font_weight = "normal" --String
	,  font_style = "none" --String
	,  font_size = "normal" --String
	,  font_color = 0xFFFFFF --int
	,  border_color = 0x000000 --int
	,  border_width = 0 --int
	--// The below are the list of platform specific properties 
	,  background_style = "normal" -- String
	,  border_style = "normal" -- String
	,  background_image = "default.png" -- String 
}

--// Declaration of handles as return types from platform API code

skinHandle = {handle --[[LuaTable]]}
voidHandle = {handle --[[void]]}
widgetHandle = {handle --[[Object]]}
formHandle = {handle --[[LuaTable]]}
boxHandle = {handle --[[KonyContainer]]}
tabHandle = {handle --[[KonyTab]]}
popupHandle = {handle --[[LuaTable]]}
buttonHandle = {handle --[[Object]]}
calendarHandle = {handle --[[KonyCalendar]]}
checkboxgroupHandle = {handle --[[KonyCheckBoxGroup]]} 
comboboxHandle = {handle --[[KonyComboBox]]} 
datagridHandle = {handle --[[KonyDataGrid]]}
imageHandle = {handle --[[KonyImage]]}
labelHandle = {handle --[[KonyLabel]]}
lineHandle = {handle --[[KonyLabel]]}
linkHandle = {handle --[[KonyLink]]}
listboxHandle = {handle --[[KonyListBox]]}
radiobuttongroupHandle = {handle --[[KonyRadioButtonGroup]]}
richtextHandle = {handle --[[KonyRichText]]}
textareaHandle = {handle --[[KonyTextArea]]}
textfieldHandle = {handle --[[KonyTextField]]}
webHandle = {handle --[[KonyWeb]]}
cameraHandle = {handle --[[KonyCamera]]}
imagestripHandle = {handle --[[KonyImageStrip]]}
galleryHandle = {handle --[[KonyGalery]]}
mapHandle = {handle --[[KonyMap]]}
segmenteduiHandle = {handle --[[LuaTable]]}
showloadingscreenHandle = {handle --[[LoadingScreen]]}
sliderHandle = {handle --[[KonySlider]]}
advertisementHandle = {handle --[[KonyAdBar]]}
rawbytesHandle={handle --[[KonyRaw]]}
mapHandle = {handle --[[KonyMap]]}

--//<todo?> Do we need to create Handle for every widget specific data structures?
--// for Ex:-  masterdata --[[checkboxMasterdataHandle]]  (or XXXHandle.handle) ?


--//widget specific PSP(Platform Specific Proerty
--//like we have created skin structure, we may create one for this
formPSPHandle = {handle --[[Object]]}
boxPSPHandle = {handle --[[Object]]}
tabPSPHandle = {handle --[[Object]]}
popupPSPHandle = {handle --[[Object]]}
buttonPSPHandle = {handle --[[Object]]}
calendarPSPHandle = {handle --[[Object]]}
checkboxgroupPSPHandle = {handle --[[Object]]}
comboboxPSPHandle = {handle --[[Object]]}
datagridPSPHandle = {handle --[[Object]]}
imagePSPHandle = {handle --[[Object]]}
labelPSPHandle = {handle --[[Object]]}
linePSPHandle = {handle --[[Object]]}
linkPSPHandle = {handle --[[Object]]}
listboxPSPHandle = {handle --[[Object]]}
radiobuttongroupPSPHandle = {handle --[[Object]]}
richtextPSPHandle = {handle --[[Object]]}
textareaPSPHandle = {handle --[[Object]]}
textfieldPSPHandle = {handle --[[Object]]}
webPSPHandle = {handle --[[Object]]}
cameraPSPHandle = {handle --[[Object]]}
imagestripPSPHandle = {handle --[[Object]]}
galleryPSPHandle = {handle --[[Object]]}
mapPSPHandle = {handle --[[Object]]}
segmenteduiPSPHandle = {handle --[[Object]]}
showloadingscreenPSPHandle = {handle --[[Object]]}
sliderPSPHandle = {handle --[[Object]]}
advertisementPSPHandle = {handle --[[Object]]}

--//widget namespace
--//<todo> setEnabled .. case sensitive?
widget = {
	f1 = setvisibility(id --[[widgetHandle.handle]], flag --[[boolean]]
			) --voidHandle.handle
	, f2 = setfocus(id --[[widgetHandle.handle]]) --voidHandle.handle
	, f3 = setenabled(id --[[widgetHandle.handle]], flag --[[boolean]]
			) --voidHandle.handle
};


--// Window namespace

window = {
	skn = Skin(id --[[String]]) --skinHandle.handle,

	frm = Form(id --[[String]], skinvar --[[skinHandle.handle]]
		, title --[[String]], orientation --[[String]]
		, formmenu --[[LuaTable]], masterdataload --[[closure]]
		, transactionaldataload --[[closure]], addwidgets --[[closure]]
		, menuskin --[[skinHandle.handle]], menufocusskin --[[skinHandle.handle]]
		, platformspecificproperties --[[formPSPHandle]]
		) --formHandle.handle,

	box = Box(id --[[String]], skinvar --[[skinHandle.handle]], orientation --[[String]]
		, spacing --[[int]], widgetdirection --[[int]], invisible --[[boolean]] 
		, containerweight --[[int]], platformspecificproperties --[[boxPSPHandle]]
		) --boxHandle.handle,

	tab =  TabWidget(id --[[String]], activeskin --[[skinHandle.handle]], inactiveskin --[[skinHandle.handle]]
		, isvisible --[[boolean]], platformspecificproperties --[[tabPSPHandle]]
		) --tabHandle.handle,
	
	popup = Popup(id --[[String]], skinvar --[[skinHandle.handle]], title --[[String]]
		, orientation --[[String]], addWidgets --[[closure]], containerweight --[[int]] 
		, platformspecificproperties --[[popupPSPHandle]]
		) --popupHandle.handle,

	btn = Button(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, text --[[String]], image --[[String]], onclick --[[closure]], isvisible --[[boolean]]
		, containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[buttonPSPHandle]]
		) --buttonHandle.handle,

	cal = Calendar(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, format --[[String]], isvisible --[[boolean]], containerweight --[[int]], hexpand --[[boolean]]
		, vexpand --[[boolean]], widgetalign --[[int]], platformspecificproperties --[[calendarPSPHandle]]
		) --calendarHandle.handle,

	dataGrid = DataGrid(id --[[String]], skinvar --[[skinHandle.handle]], focusskin --[[skinHandle.handle]]
		, headerskin --[[skinHandle.handle]], alternateskin --[[skinHandle.handle]], columnmetainfo --[[LuaTable]]
		, showcolumnheaders --[[boolean]], rowclick --[[closure]], ismulticlick --[[boolean]]
		, isvisible --[[boolean]], containerweight --[[int]]
		, platformspecificproperties --[[datagridPSPHandle]]
		) --datagridHandle.handle,

	image = Image(id --[[String]], src --[[String]], isvisible --[[boolean]]
		, containerweight --[[int]], hexapand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[imagePSPHandle]]
		) --imageHandle.handle,

	lbl = Label(id --[[String]], skinvar --[[skinHandle.handle]], text --[[String]]
		, invisible --[[boolean]], containerweight --[[int]], hexapand --[[boolean]]
		, vexpand --[[boolean]], widgetalign --[[int]], platformspecificproperties --[[LuaTable]]
		) --labelHandle.handle,

	line = Line(id --[[String]], thickness --[[int]], color --[[String]], orientation --[[String]]
		, isvisible --[[boolean]], containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[linePSPHandle]]
		) --lineHandle.handle ,

	link = Link(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, text --[[String]], image --[[String]], onclick --[[closure]], isvisible --[[boolean]]
		, containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[linkPSPHandle]]
		) --linkHandle.handle,

	listBox = ListBox(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, masterdata --[[LuaTable]], multiple --[[boolean]], ondone --[[closure]], isvisible --[[boolean]]
		, containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]], widgetalign --[[int]]
		, platformspecificproperties --[[listboxPSPHandle]]
		) --listboxHandle.handle ,

	comboBox = ComboBox(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, masterdata --[[LuaTable]], ondone --[[closure]], isvisible --[[boolean]] 
		, containerweight --[[int]], hexpand --[[boolean]], widgetalign --[[int]]
		, platformspecificproperties --[[comboboxPSPHandle]]
		) --comboboxHandle.handle,
 
	chkBoxGroup = CheckBoxGroup(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, masterdata --[[LuaTable]], orientation --[[String]], onselection --[[closure]]
		, isvisible --[[boolean]], containerweight --[[int]], widgetalign --[[int]]
		, platformspecificproperties --[[checkboxgroupPSPHandle]]
		) --checkboxgroupHandle.handle,

	radioBtnGroup = RadioButtonGroup(id --[[String]], skinvar --[[skinHandle.handle]]
		, onfocusskin --[[skinHandle.handle]], masterdata --[[LuaTable]], orientation --[[String]]
		, onselection --[[closure]], containerweight --[[int]], widgetalign --[[int]] 
		, platformspecificproperties --[[radiobuttongroupPSPHandle]]
		) --radiobuttongroupHandle.handle,

	richText = RichText(id --[[String]], skinvar --[[skinHandle.handle]], text --[[String]]
		, isvisible --[[boolean]], containerweight --[[int]], hexpand --[[boolean]]
		, vexpand --[[boolean]], widgetalign --[[int]], onclick --[[closure]]
		, platformspecificproperties --[[richtextPSPHandle]]
		) --richtextHandle.handle,

	txtArea = TextArea(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, text --[[String]], length --[[int]], mode --[[String]], isvisible --[[boolean]]
		, containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[textareaPSPHandle]]
		) --textareaHandle.handle,

	txtfld = TextField(id --[[String]], skinvar --[[skinHandle.handle]], onfocusskin --[[skinHandle.handle]]
		, text --[[String]], length --[[int]], mode --[[String]], invisible --[[boolean]]
		, containerweight --[[int]], hexapod --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[textfieldPSPHandle]]
		) --textfieldHandle.handle,

	browser = Web(id --[[String]], url --[[String]], method --[[String]], data --[[LuaTable]]
		, htmlstring --[[String]], onsuccess --[[closure]], onfailure --[[closure]]
		, containerweight --[[int]], isvisible --[[boolean]]
		, platformspeficproperties --[[webPSPHandle]]
		) --webHandle.handle,

	camera = Camera(id --[[String]], skinvar --[[skinHandle.handle]], focusskin --[[skinHandle.handle]]
		, text --[[String]], image --[[String]], customhandler --[[closure]]
		, isvisible --[[boolean]], containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[cameraPSPHandle]]
		) --cameraHandle.handle,

	imagestrip = HorizontalImageStrip(id --[[String]], skinvar --[[skinHandle.handle]]
		, focusskin --[[skinHandle.handle]], onclick --[[closure]], isvisible --[[boolean]]
		, containerweight --[[int]], hexpand --[[boolean]], vexpand --[[boolean]]
		, widgetalign --[[int]], platformspecificproperties --[[imagestripPSPHandle]]
		) --imagestripHandle.handle,

	gallery = Gallery(id --[[String]], skinvar --[[skinHandle.handle]], focusskin --[[skinHandle.handle]]
		, navigationSkin --[[skinHandle.handle]], showstatus --[[boolean]], onclick --[[closure]]
		, isvisible --[[boolean]], containerweight --[[int]], hexpand --[[boolean]]
		, vexpand --[[boolean]], widgetalign --[[int]]
		, platformspecificproperties --[[galleryPSPHandle]]
		) --galleryHandle.handle,
	
	map = Map(id --[[String]], onselection --[[closure]], provider --[[String]]
		, key --[[String]], defaultpinimage --[[String]], containerweight --[[int]]
		, isvisible --[[boolean]], platformspecificproperties --[[mapPSPHandle]]
		) --mapHandle.handle,

	segment = SegmentedUI(id --[[String]], skinvar --[[skinHandle.handle]], focusskin --[[skinHandle.handle]]
		, navigationskin --[[skinHandle.handle]], template --[[boxHandle.handle]], showstatus --[[boolean]]
		, onclick --[[closure]], menu --[[LuaTable]], isvisible --[[boolean]]
		, containerweight --[[int]], platformspecificproperties --[[segmenteduiPSPHandle]]
		) --segmenteduiHandle.handle ,

	--//<todo...> showloadingscreen  <casesensitive> ??
	ldscreen = Showloadingscreen(skinvar --[[skinHandle.handle]], text --[[String]], position --[[String]]
		, isBlocked --[[boolean]], showprogressindicator --[[boolean]] 
		, platformspecificproperties --[[showloadingscreenPSPHandle]]
		) --voidHandle.handle,

	
	dismissloadingscreen = dismissloadingscreen() --voidHandle.handle,
 
	slider =  Slider(id --[[String]], min --[[int]], max --[[int]], defaultp --[[int]]
		, step --[[int]], onslidecallback --[[int]], onselectcallback --[[int]]
		, isvisible --[[boolean]], containerweight --[[int]], widgetalign --[[int]]
		, platformspecificproperties --[[sliderPSPHandle]]
		) --sliderHandle.handle,

	adwidget = Advertisement(id --[[String]], skinvar --[[skinHandle.handle]], focusskin --[[skinHandle.handle]]
		, imageontop --[[boolean]], adserviceurl --[[String]], frequency --[[int]]
		, isvisible --[[boolean]], containerweight --[[int]]
		, platformspecificproperties --[[advertisementPSPHandle]]
		) --advertisementHandle.handle,

	alert = Alert(message --[[String]], alerthandler --[[closure]], alerttype --[[String]]
		, yeslabel --[[String]], nolabel --[[String]], alerttitle --[[String]]
		) --voidHandle.handle,

	asdf = PickerView(id--[[String]],skin--[[LuaTable]],onfocusskin--[[LuaTable]],masterdata--[[LuaTable]],ondone--[[closure]],isvisible --[[boolean]],container_weight--[[int]],hexpand--[[boolean]],widgetalign--[[int]], psp --[[LuaTable]]) --[[KonyPickerView]]
}

formPSPHandle = {
	a=needAppLevelMenu--[[String]],
	b=menuRenderer--[[String]],
	c=needAppLevelMenu--[[String]],
	d=transitionDirection--[[String]],
	e=transitionEffect--[[String]],
	f=orientationmode--[[int]],
	g=NeedsIndicatorDuringPostShow--[[boolean]],
	h=FormTransparencyDuringPostShow--[[int]],
	i=enabledforidletimeout--[[boolean]],
	j=titleBar--[[String]],
	k=titleBarBackgroundImage--[[String]],
	l=preshow--[[closure]]
}

boxPSPHandle = {
	a=FixedHeightRow--[[String]],
	b=requiredparallelexecution--[[String]],
	c=onfocusskin--[[LuaTable]],
	d=percent--[[String]],
	e=onclick--[[closure]]
}

--// tab pane
--// Form namespace
--//<todo> -check the syntax
form = {
	skinvar --[[skinHandle.handle]]
	, titleskin --[[skinHandle.handle]]
	, menuskin --[[skinHandle.handle]]
	, menufocusskin --[[skinHandle.handle]]
	, f1 = add( id --[[widgetHandle.handle]]) --voidHandle.handle
	, f2 = show(id --[[formHandle.handle]]) --voidHandle.handle
	, f3 = destroy() --voidHandle.handle
	, f4 = getcurrentform() --voidHandle.handle
}

--// Box namespace
box = {
	skinvar --[[skinHandle.handle]]
	, spacing = 1 --[[int]] 
	, f = add(id --[[widgetHandle.handle]]) --voidHandle.handle
}

--// TabWidget namespace
tabwidget = {
	activetab --[[int]]
	, activetabs --[[LuaTable]]
	, activeskin --[[skinHandle.handle]]
	, activefocusskin --[[skinHandle.handle]]
	, inactiveskin --[[skinHandle.handle]]
	, tabnamealignment --[[String]]
	, expandedimage --[[String]]
	, collapsedimage --[[String]]
	, imageposition --[[String]]
	, f = add(tabwidgetid --[[tabHandle.handle]], tabname --[[String]], image --[[String]]
			, box --[[boxHandle.handle]], masterdataload --[[closure]], menu --[[LuaTable]]
			) --voidHandle.handle
}

--//Popup namespace
popupContextTable = {
	widget--[[widgetHandle.handle]] 	
	, anchor--[[String]]
	, sizetoanchorwidth --[[boolean]]
}

popup = {
	skinvar --[[skinHandle.handle]]
	, f1 = add(id --[[widgetHandle.handle]]) --voidHandle.handle
	, f2 = dismiss(id --[[popupHandle.handle]]) --voidHandle.handle
	, f3 = destroy(id --[[popupHandle.handle]]) --voidHandle.handle
	, f4 = show(id --[[popupHandle.handle]]) --voidHandle.handle
	, f5 = setcontext(id --[[popupHandle.handle]], context --[[popupContextTable]]) --voidHandle.handle
}

--//Button attributes
button = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, pressedskin --[[skinHandle.handle]]
	, onclick --[[closure]]
	, normalimage --[[String]]
	, focusimage --[[String]]
	, displaytext --[[String]]
	, rawbytes --[[rawbytesHandle.handle]]
}

--//calendar namespace
calendar = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, date --[[LuaTable]]
	, day --[[int]]
	, month --[[int]]
	, year --[[int]]
}

--// DataGrid namespace
datagrid = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, headerskin --[[skinHandle.handle]]
	, alternateskin --[[skinHandle.handle]]
	, rowcount --[[int]]
	, selectedindices --[[int]]
	, selecteditems --[[LuaTable]]
	, focusedindex --[[int]]
	, focuseditem --[[LuaTable]]
	, f1 = setdata(id --[[datagridHandle.handle]], tbl1 --[[LuaTable]]) --voidHandle.handle
    , f2 = addall(id --[[datagridHandle.handle]], tbl2 --[[LuaTable]]) --voidHandle.handle
	, f3 = setdataat(id --[[datagridHandle.handle]], index --[[int]]
			, tbl3 --[[LuaTable]]) --voidHandle.handle
	, f4 = setcelldata(id --[[datagridHandle.handle]], rowindex --[[int]], columnid --[[int]]
			, data --[[String]], data2 --[[String]]) --voidHandle.handle --//<todo, notclear> 
    , f5 = addat(id --[[datagridHandle.handle]], index --[[int]]             
			, tbl4 --[[LuaTable]]) --voidHandle.handle
    , f6 = removeall(id --[[datagridHandle.handle]]) --voidHandle.handle
    , f7 = removeat(id --[[datagridHandle.handle]], index --[[int]]) --voidHandle.handle
    , f8 = applycellskin(id --[[datagridHandle.handle]], rowindex --[[int]], columnid --[[int]]
            , skinvar --[[skinHandle.handle]]) --voidHandle.handle
    , f9 = selectall(id --[[datagridHandle.handle]], flag --[[boolean]]) --voidHandle.handle
}

--//image attributes
image = {
	src --[[String]]
	, base64 --[[String]]
	, rawbytes --[[rawbytesHandle.handle]]
	, imagewhendownloading --[[String]]
	, imagewhenfailed --[[String]]
	, ondownloadcomplete --[[closure]]
}

--//label attributes
label = {
	skinvar --[[skinHandle.handle]]
	, text --[[String]]
}

--//line attributes
line = {

}

--//link attributes
link = {
	
}

--//listbox attributes
listbox = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, masterdata --[[LuaTable]]
	, masterdatamap --[[LuaTable]]
	, selectedkeyvalues --[[LuaTable]]
	, selectedkeys --[[LuaTable]]
	, multiple --[[boolean]]
	, ondone --[[closure]]
}

--//Combobox attributes
combobox = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, masterdata --[[LuaTable]]
	, masterdatamap --[[LuaTable]]
	, selectedkeyvalue --[[LuaTable]]
	, selectedkey --[[LuaTable]]
	, ondone --[[closure]]
}

--//Checkboxgroup namespace
checkboxgroup = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, masterdata --[[LuaTable]]
	, selectedkeyvalues --[[LuaTable]]
	, selectedkeys --[[LuaTable]]
	, onselection --[[closure]]
}

--//Radiobuttongroup attributes
radiobuttongroup = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, masterdata --[[LuaTable]]
	, selectedkeyvalue --[[LuaTable]]
	, selectedkey --[[LuaTable]]
	, onselection --[[closure]]
}

--//Richtext attributes
richtext = {
	skinvar --[[skinHandle.handle]]
	, linkskin --[[skinHandle.handle]]
	, linkfocusskin --[[skinHandle.handle]]
	, supskin --[[skinHandle.handle]]
	, text --[[String]]
}

--//TextArea attributes
textarea = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
}

--//Web namespace
web = {
	phoneNumbersToBeDetected --[[boolean]]
	, screenLevelWidget --[[boolean]]
	, f1 = goback(id --[[webHandle.handle]]) --voidHandle.handle
	, f2 = goforward(id --[[webHandle.handle]]) --voidHandle.handle
	, f3 = reload(id --[[webHandle.handle]]) --voidHandle.handle
}

--//Camera namespace
camera = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, rawbytes --[[rawbytesHandle.handle]]
}

--//HorizontalImageStrip namespace
imagestrip = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, meta --[[LuaTable]]
	, focuseditem --[[LuaTable]]
	, focusedindex --[[int]]
	, datasethandler --[[closure]]
	, f1 = addall(id --[[imagestripHandle.handle]], data --[[LuaTable]], imageproeprty --[[String]]
			) --voidHandle.handle
	, f2 = setdata(id --[[imagestripHandle.handle]], data --[[LuaTable]], imageproeprty --[[String]]
            ) --voidHandle.handle
	, f3 = setdataat(id --[[imagestripHandle.handle]], data --[[LuaTable]], index --[[int]]
			) --voidHandle.handle 
	, f4 = removeall(id --[[imagestripHandle.handle]]) --voidHandle.handle
	, f5 = removeat(id --[[imagestripHandle.handle]], index --[[int]]) --voidHandle.handle
}


--//Gallery namespace
gallery = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, meta --[[LuaTable]]
	, focuseditem --[[LuaTable]]
	, focusedindex --[[int]]
	, datasethandler --[[closure]]
	, f1 = addall(id --[[galleryHandle.handle]], objects --[[LuaTable]], urlkey --[[String]]
			) --voidHandle.handle
	, f2 = setdata(id --[[galleryHandle.handle]], objects --[[LuaTable]], urlkey --[[String]]
            ) --voidHandle.handle
	, f3 = setdataat(id --[[galleryHandle.handle]], objects --[[LuaTable]], index --[[int]]
			) --voidHandle.handle 
	, f4 = removeall(id --[[galleryHandle.handle]]) --voidHandle.handle
	, f5 = removeat(id --[[galleryHandle.handle]], index --[[int]]) --voidHandle.handle
}


--//Map namespace
map = {
	locationdata --[[LuaTable]]
	, address --[[LuaTable]]
	, zoom --[[int]]
}

--//SegmentedUI namespace
segui = {
	meta --[[LuaTable]]
	, focuseditem --[[LuaTable]]
	, focusedindex --[[int]]
	, widgetdatamap --[[LuaTable]]
	, datasethandler --[[closure]]
	, skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, sectionskin --[[skinHandle.handle]]
	, alternateskin --[[skinHandle.handle]]
	, pressedskin --[[skinHandle.handle]]
	, sepcolor --[[int]]
	, septhickness --[[int]]
	, askin --[[skinHandle.handle]]
	, clickable --[[boolean]]
	, editmode --[[String]]	
	, oninsertclick --[[closure]] --//iPhone PSP
	, ondeleteclick --[[closure]] --//iPhone PSP
	, editable --[[boolean]] --//iPhone PSP
	, editstyle --[[String]] --//iPhone PSP
	, f1 = addall(id --[[segmenteduiHandle.handle]], arrayofdata --[[LuaTable]]
			) --voidHandle.handle
	, f2 = setdata(id --[[segmenteduiHandle.handle]], arrayofdata --[[LuaTable]]
			) --voidHandle.handle
	, f3 = removeall(id --[[segmenteduiHandle.handle]]) --voidHandle.handle
	, f4 = removeat(id --[[segmenteduiHandle.handle]], index --[[int]]) --voidHandle.handle
	, f5 = setdataat(id --[[segmenteduiHandle.handle]], datamap --[[LuaTable]], index--[[int]]
			) --voidHandle.handle
	, f6 = addat(id --[[segmenteduiHandle.handle]], datamap --[[LuaTable]],index --[[int]]
			) --voidHandle.handle
	, f7 = setdatawithsections(id --[[segmenteduiHandle.handle]], arrayofdata --[[LuaTable]]
			) --voidHandle.handle 
}

--//Showloadingscreen namespace
Showloadingscreen = {
	skinvar --[[skinHandle.handle]]
	, text --[[String]]
	, position --[[String]]
	, isblocked --[[boolean]]
	, showprogressindicator --[[boolean]]
	, platformspecificproperties --[[showloadingscreenPSPHandle]]
}

--//Slider namespace
slider = {
	selectedvalue --[[int]]
	, leftskin --[[skinHandle.handle]]
	, rightskin --[[skinHandle.handle]]
	, thumbimage --[[String]]
}

--//adwidget namespace
advertisement = {
	skinvar --[[skinHandle.handle]]
	, focusskin --[[skinHandle.handle]]
	, imageontop --[[boolean]]
	, adserviceurl --[[String]]
	, frequency --[[int]]
}

