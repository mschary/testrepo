<?xml version="1.0" encoding="UTF-8"?>
<project default="build" name="build">

  <target name="init">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
	<property file="${basedir}\build.property" />
	<property file="../../ccbuild.properties"/>
	<property name="dist.plugin.dir" value="dist"/>
	<property name="luatranslator.dir" value="../../luatranslator"/>
 
	<!-- find the plugin version. If Custom label is  platform-branch-major.minor.releasnumber format.  Then plugin-version=major.minor.releasenumber -->
	<propertyregex
		property="plugin-version"
		input="${LABEL}"
		regexp=".*-(\d)\.(\d)\.(\d+)$"
		select="\1.\2.\3"/> 
  
	<!-- find the plugin version. If Custom label is  platform-branch-major.minor format. Then plugin-version=major.minor.0 -->
	<propertyregex
		property="plugin-version"
		input="${LABEL}"
		regexp=".*-(\d)\.(\d)$"
		select="\1.\2.0"/> 
		
	<!-- find the plugin version. If Custom label is  platform_pluign-branch-build_number format. Then plugin-version=1.0.build_number else 1.0.0. Default version is 1.0.0-->
	<condition property="plugin-version" value="1.0.${LABELNUM}" else="1.0.0">
		<matches pattern=".+_plugin-.+\.[0-9]+" string="${LABEL}"/>
	</condition>
	
	<!-- find the plugin environment (Dev|QA|GA). If Custom label is  platform-branch-major.minor format. Then plugin-environmnent=branch -->
	<propertyregex 
		property="envmnt"
		input="${LABEL}"
		regexp=".*-(.+)-(\d)\.(\d|\d\.\d+)$"
		select="\1"/> 
		
	<!-- If Custom label is other format, assign target.branch value to plugin-environment -->
	<!-- Replace . character with _ for the plugin.version -->		
	<propertyregex property="Rtarget.branch"
        input="${target.branch}"
        regexp="\."
        replace="_"
        global="true" />
		   
	<condition property="Rtarget.branch" value="${target.branch}">
		<not>  
			<isset property="Rtarget.branch"/>
		</not>
	</condition>		
		
	<property name="envmnt" value="${Rtarget.branch}" />
		
	<property name="nativeplugin.version" value="${plugin-version}.${envmnt}" />
	
	<echo message="pulgin version:${nativeplugin.version}"/>
	<echo message="branch:${branch}"/>
	<echo message="build:${build}"/>
  </target>

	<target name="clean">
		<delete dir ="${dist.plugin.dir}"/>			
	</target>
	
	<target name="luatranslator-build">
		<echo message="Building Dependency luatranslator"/>	
		<ant dir="../../luatranslator" antfile="build.xml" target="copyAllRes"/>
		<echo message="Successfully built Dependency luatranslator"/>	
	</target>
	
	<target name="setup" depends="luatranslator-build">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		  <classpath>
		    <pathelement location="lib/ant-contrib-0.6.jar"/>
		  </classpath>
		</taskdef>
		<tstamp/>
		
		<mkdir dir="${dist.plugin.dir}"/>
		<mkdir dir="${dist.plugin.dir}/META-INF"/>		
		<mkdir dir="${dist.plugin.dir}/nativefiles"/>
		<mkdir dir="${dist.plugin.dir}/lib"/>
		
		<copy file="META-INF/MANIFEST.MF" todir="${dist.plugin.dir}/META-INF"/>		
		<copydir src="bin" dest="${dist.plugin.dir}"/>
		
		
		<replace file="${dist.plugin.dir}/META-INF/MANIFEST.MF" token="Bundle-Version: 1.0.0.qualifier" value="Bundle-Version: ${nativeplugin.version}"/>
		 
		 
		<!-- Copy necessary luatraslator resources	-->
		<copy file="${luatranslator.dir}/iPhone/dist/ioscodegen.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>
		<copy file="${luatranslator.dir}/BlackBerry/dist/bbcodegen.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>
		<copy file="${luatranslator.dir}/Android/dist/droidcodegen.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>
		<copy file="${luatranslator.dir}/SPA/dist/spacodegen.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>
		<copy file="lib/antlr-3.3-complete.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>
		<copy file="lib/ant-contrib-0.6.jar" todir="${dist.plugin.dir}/lib" overwrite="true"/>		
		<copydir src="icons" dest="${dist.plugin.dir}/icons" forceoverwrite="true" />
		
		<copydir src="${luatranslator.dir}/iPhone/dist/resources" dest="${dist.plugin.dir}/nativefiles/iphone"/>
		<copydir src="${luatranslator.dir}/BlackBerry/dist/resources" dest="${dist.plugin.dir}/nativefiles/blackberry"/>
		<copydir src="${luatranslator.dir}/Android/dist/resources" dest="${dist.plugin.dir}/nativefiles/android"/>
		<copydir src="${luatranslator.dir}/iPhone/dist/resources" dest="${dist.plugin.dir}/nativefiles/ipad"/>
		<copydir src="${luatranslator.dir}/SPA/dist/resources" dest="${dist.plugin.dir}/nativefiles/SPA"/>
		<copy file="nativefiles/nativebuild.xml" todir="${dist.plugin.dir}/nativefiles" overwrite="true"/>	
		<copy file="nativefiles/blackberry/KonyApplicationStart.java" todir="${dist.plugin.dir}/nativefiles/blackberry" overwrite="true"/>
		
		<copy file="plugin.xml" todir="${dist.plugin.dir}/" overwrite="true"/>		
		
		<copy file="../../ccbuild.properties" tofile="${dist.plugin.dir}/platform.properties" overwrite="true"/>			
		
	</target>
	
	<target name="build" depends="init,clean,setup">		
		<!-- Create the plugin jar file -->
		<jar destfile="${dist.plugin.dir}/com.kony.nativecodegen_${nativeplugin.version}.jar" filesetmanifest="merge" basedir="${dist.plugin.dir}"/>
				
		<echo message="Publishing the Kony Native Codegen Plugin"/>
		<ant dir="." antfile="customplugin-web.xml"/>
		<echo message="Sucessfully Published the Kony Native Codegen Plugin"/>
	</target>
</project>
